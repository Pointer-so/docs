{
  "openapi": "3.0.3",
  "info": {
    "title": "Pointer API",
    "description": "API Information for internal development.",
    "termsOfService": "http://pointer.so/tos",
    "version": "0.2",
    "contact": {
      "name": "Khosraw Azizi",
      "email": "khosraw@pointer.so"
    },
    "servers": [
      "http://localhost:8080"
    ]
  },
  "tags": [],
  "paths": {
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "0",
      "3": ".",
      "4": "3"
    },
    "/notes/source/{sourceType}": {
      "get": {
        "summary": "Get notes by source type for the authenticated user",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "AUDIO",
                "VIDEO",
                "DOCUMENT"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/recent": {
      "get": {
        "summary": "Get recent notes for the authenticated user",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved recent notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/classrooms/{noteId}": {
      "get": {
        "summary": "Get classrooms where a note has been added",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms where note has been added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Classroom"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/add/{classroomId}": {
      "post": {
        "summary": "Add a note to a classroom",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added note to classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/remove/{classroomId}": {
      "delete": {
        "summary": "Remove a note from a classroom",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed note from classroom",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Note removed from classroom successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/publish/{classroomId}": {
      "post": {
        "summary": "Publish a note to a classroom (only for teachers)",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully published note to classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/unpublish/{classroomId}": {
      "delete": {
        "summary": "Unpublish a note from a classroom (only for teachers)",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unpublished note from classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/published/classrooms/{noteId}": {
      "get": {
        "summary": "Get classrooms where a note has been published",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms where note has been published",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteClassrooms"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/classroom/{classroomId}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Get notes that have been added to a classroom",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully grabbed all notes from classroom",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#components/schemas/Note"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/file": {
      "post": {
        "summary": "Generate a note from a file",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/audio": {
      "post": {
        "summary": "Generate a note from an audio file",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/youtube": {
      "post": {
        "summary": "Generate a note from a YouTube video",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "youtubeUrl"
                ],
                "properties": {
                  "youtubeUrl": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "NoteUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "The request was invalid or cannot be served",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntityError": {
        "description": "The request was well-formed but was unable to be followed due to semantic errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "/studysets/quizzes": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Create a new quiz",
        "description": "Create a new quiz for a specific study set",
        "operationId": "createQuiz",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "studySetId",
                  "title",
                  "questionCount",
                  "answerType",
                  "questionTypes"
                ],
                "properties": {
                  "studySetId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "questionCount": {
                    "type": "integer"
                  },
                  "answerType": {
                    "type": "string",
                    "enum": [
                      "TERM",
                      "DEFINITION",
                      "MIXED"
                    ]
                  },
                  "questionTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "TRUE_FALSE",
                        "MULTIPLE_CHOICE",
                        "WRITTEN",
                        "KNOWLEDGE_APPLICATION"
                      ]
                    }
                  },
                  "additionalNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/quizzes": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get quizzes for a study set",
        "description": "Retrieve all quizzes associated with a specific study set",
        "operationId": "getQuizzesByStudySet",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quizzes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Quiz"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get a specific quiz",
        "description": "Retrieve a specific quiz by its ID",
        "operationId": "getQuizById",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizWithQuestions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a quiz",
        "description": "Update a specific quiz",
        "operationId": "updateQuiz",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "questionCount",
                  "answerType",
                  "questionTypes"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "questionCount": {
                    "type": "integer"
                  },
                  "answerType": {
                    "type": "string",
                    "enum": [
                      "TERM",
                      "DEFINITION",
                      "MIXED"
                    ]
                  },
                  "questionTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "TRUE_FALSE",
                        "MULTIPLE_CHOICE",
                        "WRITTEN",
                        "KNOWLEDGE_APPLICATION"
                      ]
                    }
                  },
                  "additionalNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiz updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a quiz",
        "description": "Delete a specific quiz",
        "operationId": "deleteQuiz",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Quiz deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}/questions": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Add a question to a quiz",
        "description": "Add a new question to a specific quiz",
        "operationId": "addQuizQuestion",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "questionType",
                  "question",
                  "correctAnswer"
                ],
                "properties": {
                  "questionType": {
                    "type": "string",
                    "enum": [
                      "TRUE_FALSE",
                      "MULTIPLE_CHOICE",
                      "WRITTEN",
                      "KNOWLEDGE_APPLICATION"
                    ]
                  },
                  "question": {
                    "type": "string"
                  },
                  "correctAnswer": {
                    "type": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Question added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestion"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-questions/{questionId}": {
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a quiz question",
        "description": "Update a specific quiz question",
        "operationId": "updateQuizQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "questionType",
                  "question",
                  "correctAnswer"
                ],
                "properties": {
                  "questionType": {
                    "type": "string",
                    "enum": [
                      "TRUE_FALSE",
                      "MULTIPLE_CHOICE",
                      "WRITTEN",
                      "KNOWLEDGE_APPLICATION"
                    ]
                  },
                  "question": {
                    "type": "string"
                  },
                  "correctAnswer": {
                    "type": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestion"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz question"
          },
          "404": {
            "description": "Quiz question not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a quiz question",
        "description": "Delete a specific quiz question",
        "operationId": "deleteQuizQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this quiz question"
          },
          "404": {
            "description": "Quiz question not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}/start": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Start a quiz session",
        "description": "Start a new session for a specific quiz",
        "operationId": "startQuizSession",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Quiz session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionToken": {
                      "type": "string"
                    },
                    "quizMetadata": {
                      "type": "object",
                      "properties": {
                        "totalQuestions": {
                          "type": "integer"
                        },
                        "studySetId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "sessionId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-sessions/{sessionId}/question": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get current quiz questions",
        "description": "Retrieve all questions for the current quiz session",
        "operationId": "getCurrentQuizQuestion",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz questions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "questions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QuizQuestion"
                      }
                    },
                    "timeRemaining": {
                      "type": "integer"
                    },
                    "totalQuestions": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "404": {
            "description": "No questions found for this quiz"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/me/download-data": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Request download of user data",
        "description": "Initiates a process to gather and email the user's data",
        "operationId": "downloadUserData",
        "responses": {
          "202": {
            "description": "Data export request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message",
                      "example": "Your data export request has been received. You will receive an email with your data shortly."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error initiating data download"
          }
        }
      }
    },
    "/users/me/mailing-list": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update mailing list subscription",
        "description": "Update the current user's mailing list subscription status",
        "operationId": "updateMailingListSubscription",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isSubscribed": {
                    "type": "boolean",
                    "description": "Whether the user wants to subscribe to the mailing list",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mailing list subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error updating mailing list subscription"
          }
        }
      }
    },
    "/users/me/sample-data/student": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set up sample data for a student user",
        "description": "Create sample data including a TA, note, and study set for a newly onboarded student user",
        "operationId": "setupStudentSampleData",
        "responses": {
          "200": {
            "description": "Sample data created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sample data created successfully"
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    },
                    "note": {
                      "$ref": "#/components/schemas/Note"
                    },
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a student | User is not onboarded"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error setting up sample data"
          }
        }
      }
    },
    "/users/me/sample-data/teacher/{classroomId}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set up sample data for a teacher user",
        "description": "Create sample data including a TA, note, study set, and class material for a newly onboarded teacher user in a specific classroom",
        "operationId": "setupTeacherSampleData",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "ID of the classroom to create sample data for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sample data created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sample data created successfully"
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    },
                    "note": {
                      "$ref": "#/components/schemas/Note"
                    },
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    },
                    "material": {
                      "$ref": "#/components/schemas/Material"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Invalid classroomId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not onboarded"
          },
          "404": {
            "description": "User not found | Classroom not found or unauthorized"
          },
          "500": {
            "description": "Error setting up sample data"
          }
        }
      }
    },
    "/utils/chat/completion": {
      "post": {
        "tags": [
          "Util"
        ],
        "summary": "Stream chat completion for text modification (HTTP)",
        "description": "Modify highlighted text within a given context using various modification types and stream the response via HTTP",
        "operationId": "streamChatCompletionHttp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "context",
                  "type",
                  "highlighted"
                ],
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "The full context in which the highlighted text appears"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "summarize",
                      "makelonger",
                      "makeshorter",
                      "simplify",
                      "examples",
                      "flashcards",
                      "custom"
                    ],
                    "description": "The type of modification to apply to the highlighted text"
                  },
                  "highlighted": {
                    "type": "string",
                    "description": "The specific text to be modified within the context"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "Custom prompt for modification (required when type is 'custom')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with streaming content",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Chunks of the modified text or '[DONE]' to signify the end of the stream"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error processing chat completion"
          }
        }
      }
    },
    "/ws": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "WebSocket connection for chat completion streaming",
        "description": "Establish a WebSocket connection for real-time streaming of chat completion results",
        "operationId": "streamChatCompletionWebSocket",
        "responses": {
          "101": {
            "description": "Switching Protocols - WebSocket connection established"
          }
        },
        "x-websocket": true,
        "x-websocket-description": "Once the WebSocket connection is established, clients can send chat completion requests and receive streamed responses.\n\nMessage format for sending requests:\n```json\n{\n  \"context\": \"string\",\n  \"type\": \"summarize|makelonger|makeshorter|simplify|examples|flashcards|custom\",\n  \"highlighted\": \"string\",\n  \"prompt\": \"string (required for custom type)\"\n}\n```\n\nResponse format:\n```json\n{\n  \"content\": \"string (chunk of modified text or '[DONE]' to signify the end of the stream)\"\n}\n```\n\nError response format:\n```json\n{\n  \"error\": \"string (error message)\"\n}\n```\n"
      }
    },
    "/utils/jwt": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "Generate a JWT token for authentication",
        "description": "Generate a JWT token for authentication",
        "operationId": "generateJWT",
        "responses": {
          "200": {
            "description": "Successful response with JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The generated JWT token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error generating JWT token"
          }
        }
      }
    },
    "/utils/tiptap-jwt": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "Generate a JWT token for authentication",
        "description": "Generate a JWT token for authentication",
        "operationId": "generateJWT",
        "responses": {
          "200": {
            "description": "Successful response with JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The generated JWT token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error generating JWT token"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivityResult object."
          },
          "activitySessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the activity session this result belongs to."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user who participated in the activity."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set associated with this activity."
          },
          "activityType": {
            "type": "string",
            "enum": [
              "MATCHING",
              "ASTEROID"
            ],
            "description": "The type of activity that was performed."
          },
          "score": {
            "type": "integer",
            "description": "The score achieved in the activity."
          },
          "timeTaken": {
            "type": "number",
            "format": "double",
            "description": "The total time taken to complete the activity in seconds."
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity was completed."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity result was last updated."
          }
        }
      },
      "ActivityRoundResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivityRoundResult object."
          },
          "activitySessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the activity session this round result belongs to."
          },
          "roundNumber": {
            "type": "integer",
            "description": "The round number of the activity."
          },
          "score": {
            "type": "integer",
            "description": "The score achieved in this round of the activity."
          },
          "timeSpent": {
            "type": "number",
            "format": "double",
            "description": "The time spent on this round of the activity in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the round result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the round result was last updated."
          }
        }
      },
      "ActivitySession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivitySession object."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user participating in the activity."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set associated with this activity."
          },
          "activityType": {
            "type": "string",
            "enum": [
              "MATCHING",
              "ASTEROID"
            ],
            "description": "The type of activity being performed."
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session started."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session ended (if completed)."
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "TIMED_OUT"
            ],
            "description": "The current status of the activity session."
          },
          "currentRound": {
            "type": "integer",
            "description": "The current round number of the activity."
          },
          "timeRemaining": {
            "type": "number",
            "format": "double",
            "description": "The remaining time for the activity session in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session was last updated."
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "description": "The unique identifier of the chat message."
          },
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TASession",
            "required": true,
            "description": "The unique identifier of the TA session."
          },
          "userSenderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "The unique identifier of the user who sent the message."
          },
          "userReceiverId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "The unique identifier of the user who received the message."
          },
          "taSenderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "description": "The unique identifier of the TA who sent the message."
          },
          "taReceiverId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "description": "The unique identifier of the TA who received the message."
          },
          "attachmentId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/MessageAttachment",
            "description": "The unique identifier of the message/file attachment."
          },
          "messageText": {
            "type": "string",
            "maxLength": 10000,
            "description": "The text content of the chat message.",
            "example": "Hi can I get some help with my math assignment?"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the chat message was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the chat message was last updated."
          }
        }
      },
      "Classroom": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the classroom."
          },
          "className": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name of the classroom.",
            "example": "AP Biology 2nd Period"
          },
          "img": {
            "type": "string",
            "maxLength": 1000,
            "description": "The URL or descriptor of the image for the classroom.",
            "example": "https://www.example.com/image.jpg"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The owner of the classroom."
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The description of the classroom.",
            "example": "This is a classroom for AP Biology students."
          },
          "section": {
            "type": "string",
            "maxLength": 50,
            "description": "The section/period/placement of the classroom either in a time or physical sense.",
            "example": "Period 2"
          },
          "gradeLevel": {
            "type": "string",
            "maxLength": 50,
            "description": "The grade level of the classroom.",
            "example": "5th Grade"
          },
          "classroomCode": {
            "type": "string",
            "maxLength": 16,
            "required": true,
            "unique": true,
            "description": "The unique identifier used to join the classroom.",
            "example": "KHF76D"
          },
          "status": {
            "type": "string",
            "required": true,
            "enum": [
              "CONNECTED",
              "DISCONNECTED",
              "ARCHIVED"
            ],
            "default": "DISCONNECTED",
            "description": "The status of the classroom.",
            "example": "CONNECTED"
          },
          "googleClassroomId": {
            "type": "string",
            "maxLength": 50,
            "description": "The unique identifier of the Google Classroom in Google API.",
            "unique": true
          },
          "lastCodeGen": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "required": true,
            "description": "The date and time the last code was generated."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the classroom was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the classroom was last updated/modified at."
          }
        }
      },
      "ClassroomUsers": {
        "type": "object",
        "properties": {
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The classroom to form the relationship with."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The user to form the relationship with."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "ClassroomTAs": {
        "type": "object",
        "properties": {
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The classroom to form the relationship with."
          },
          "taId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "required": true,
            "description": "The TA to form the relationship with."
          },
          "published": {
            "type": "boolean",
            "required": true,
            "description": "The status of the TA in the classroom."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "ClassroomTopicOverview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this classroom topic overview object."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "description": "The class this topic overview belongs to."
          },
          "strugglingTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "doingWellTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "commonQuestions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "Flashcard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the Flashcard object."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set this flashcard belongs to."
          },
          "term": {
            "type": "string",
            "description": "The term or question side of the flashcard."
          },
          "definition": {
            "type": "string",
            "description": "The definition or answer side of the flashcard."
          },
          "order": {
            "type": "integer",
            "description": "The order of the flashcard within the study set."
          },
          "isStarred": {
            "type": "boolean",
            "description": "Indicates whether the flashcard is starred by the user."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the flashcard was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the flashcard was last updated."
          }
        }
      },
      "GradedAssignment": {
        "type": "object",
        "description": "Represents a graded assignment submitted by a student",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the graded assignment",
            "readOnly": true
          },
          "graderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Grader",
            "description": "ID of the grader associated with this assignment"
          },
          "studentId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "ID of the student who submitted this assignment"
          },
          "grade": {
            "type": "integer",
            "description": "The grade assigned to this submission"
          },
          "chainOfReasoning": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the person in the chain of reasoning"
                },
                "points": {
                  "type": "integer",
                  "description": "Points assigned by the person in the chain of reasoning"
                },
                "comments": {
                  "type": "string",
                  "description": "Comments provided by the person in the chain of reasoning"
                }
              }
            }
          },
          "reasons": {
            "type": "string",
            "maxLength": 1000,
            "description": "Reasons for the assigned grade",
            "nullable": true
          },
          "strengths": {
            "type": "string",
            "maxLength": 1000,
            "description": "Noted strengths of the submission",
            "nullable": true
          },
          "weaknesses": {
            "type": "string",
            "maxLength": 1000,
            "description": "Noted weaknesses or areas for improvement",
            "nullable": true
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of file IDs associated with this submission",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the graded assignment was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the graded assignment was last updated",
            "readOnly": true
          }
        },
        "required": [
          "graderId",
          "studentId",
          "grade"
        ],
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174002",
          "graderId": "123e4567-e89b-12d3-a456-426614174000",
          "studentId": "123e4567-e89b-12d3-a456-426614174003",
          "grade": 85,
          "reasons": "Well-structured essay with good arguments, but lacking some depth in analysis",
          "strengths": "Clear writing style, good use of examples",
          "weaknesses": "Could improve on critical analysis and connecting ideas",
          "fileIds": [
            "123e4567-e89b-12d3-a456-426614174004",
            "123e4567-e89b-12d3-a456-426614174005"
          ],
          "createdAt": "2023-06-30T09:00:00Z",
          "updatedAt": "2023-06-30T10:15:00Z"
        }
      },
      "Grader": {
        "type": "object",
        "description": "Represents a grader entity for assignments",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the grader",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title of the grader"
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "description": "ID of the classroom associated with this grader"
          },
          "totalPoints": {
            "type": "integer",
            "description": "Total points possible for this grader"
          },
          "assistantId": {
            "type": "string",
            "maxLength": 50,
            "description": "ID of the AI assistant associated with this grader"
          },
          "googleClassroomAssignment": {
            "type": "string",
            "maxLength": 50,
            "description": "ID of the associated Google Classroom assignment (if applicable)",
            "nullable": true
          },
          "gradingNotes": {
            "type": "string",
            "maxLength": 1000,
            "description": "Additional notes for grading",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the grader was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the grader was last updated",
            "readOnly": true
          }
        },
        "required": [
          "title",
          "totalPoints",
          "assistantId"
        ],
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "title": "Midterm Exam",
          "classroomId": "123e4567-e89b-12d3-a456-426614174001",
          "totalPoints": 100,
          "assistantId": "assistant-123",
          "googleClassroomAssignment": "gc-assignment-456",
          "gradingNotes": "Remember to check for proper citation format",
          "createdAt": "2023-06-29T12:34:56Z",
          "updatedAt": "2023-06-29T14:45:00Z"
        }
      },
      "Material": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the Material object."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The unique identifier for the Classroom this material is created for."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The unique identifier for the User this material was created by."
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "required": true,
            "description": "The name of the class material."
          },
          "materialType": {
            "type": "string",
            "maxLength": 25,
            "required": true,
            "description": "The type of material generated (e.g. Lesson Plan, Class Activity, Assessment)."
          },
          "duration": {
            "type": "string",
            "maxLength": 25,
            "required": true,
            "description": "The amount of time it should take to complete this material from the student side."
          },
          "description": {
            "type": "string",
            "maxLength": 2000,
            "required": true,
            "description": "The short description of what the material is and what it does."
          },
          "summary": {
            "type": "string",
            "maxLength": 5000,
            "required": true,
            "description": "A summary of what the material is ideally about."
          },
          "overview": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class material as a highly detailed overview of what it is and how it's structured. Used for Lesson Plans."
          },
          "guidedNotes": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class material as a highly detailed version that the student can follow by taking notes. This will also contain the answers to all fields. Used for Lesson Plans."
          },
          "activityPlan": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class activity plan, detailing the structure and flow of the activity. Used for Class Activities."
          },
          "worksheet": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the worksheet associated with the class activity. Used for Class Activities."
          },
          "assessment": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the assessment content, including questions and instructions. Used for Assessments."
          },
          "rubric": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the rubric used for grading the assessment. Used for Assessments."
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialResource"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "LessonPlanOverview": {
        "type": "object",
        "properties": {
          "overview": {
            "type": "string",
            "description": "AI-generated markdown overview of the lesson plan. This field contains a structured overview including: 1. Title and Basic Information 2. Summary and Learning Objectives 3. Standards Alignment 4. Detailed Agenda 5. Assessment and Differentiation 6. Materials and Resources\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML or LaTeX for clarity.\n"
          }
        }
      },
      "GuidedNotes": {
        "type": "object",
        "properties": {
          "guidedNotes": {
            "type": "string",
            "description": "AI-generated markdown guided notes for the lesson plan. This field contains structured content with: - Clear, concise explanations of concepts - Relevant examples or illustrations - Questions or prompts that encourage critical thinking - Custom tags for different types of student responses:\n  * <question_#_tiny> for single word or very short answers\n  * <question_#_short> for answers of a few words\n  * <question_#_normal> for one to two sentence answers\n  * <question_#_long> for paragraph answers\n\nThe content uses markdown formatting, including headers and emphasis. It may also include light HTML or LaTeX for clarity.\n"
          }
        }
      },
      "ClassActivityPlan": {
        "type": "object",
        "properties": {
          "activityPlan": {
            "type": "string",
            "description": "AI-generated markdown plan for the class activity. This field contains a structured plan including: 1. Activity objectives and learning goals 2. Materials needed 3. Step-by-step instructions for conducting the activity 4. Time allocations for each part of the activity 5. Differentiation strategies 6. Assessment methods\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML for additional formatting if needed.\n"
          }
        }
      },
      "Worksheet": {
        "type": "object",
        "properties": {
          "worksheet": {
            "type": "string",
            "description": "AI-generated markdown worksheet for the class activity. This field contains structured content with: - Clear instructions for each section or question type - A variety of question types and tasks, such as:\n  * Multiple choice questions\n  * Short answer questions\n  * Fill-in-the-blank exercises\n  * Matching exercises\n  * Diagram labeling\n  * Problem-solving tasks\n  * Critical thinking questions\n- A progression from simpler to more complex tasks - Spaces for student responses using custom tags:\n  * <question_#_mc> for multiple choice questions\n  * <question_#_sa> for short answer questions\n  * <question_#_fb> for fill-in-the-blank exercises\n  * <question_#_m> for matching exercises\n  * <question_#_dl> for diagram labeling\n  * <question_#_ps> for problem-solving tasks\n  * <question_#_ct> for critical thinking questions\n- A mix of individual and group work elements (if applicable) - A reflection or self-assessment section at the end\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML for additional formatting if needed.\n"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "questionTag": {
                  "type": "string",
                  "description": "The tag corresponding to the question (e.g., \"question_1_mc\")"
                },
                "correctAnswer": {
                  "type": "string",
                  "description": "The correct answer for the question"
                },
                "explanation": {
                  "type": "string",
                  "description": "A detailed explanation of the correct answer and how to arrive at it"
                }
              }
            }
          }
        }
      },
      "Assessment": {
        "type": "object",
        "properties": {
          "assessment": {
            "type": "string",
            "description": "AI-generated markdown assessment plan. This field contains a structured plan including: 1. Assessment Title and Basic Information 2. Learning Objectives 3. Assessment Format 4. Question Types and Distribution 5. Sample Questions 6. Scoring and Grading 7. Accommodations and Modifications 8. Administration Instructions 9. Post-Assessment Analysis\nThe content uses markdown formatting, including headers, lists, and emphasis.\n"
          }
        }
      },
    }
  }
}
