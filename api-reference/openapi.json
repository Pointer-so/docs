{
  "openapi": "3.0.3",
  "info": {
    "title": "Pointer API",
    "description": "API Information for internal development.",
    "termsOfService": "http://pointer.so/tos",
    "version": "0.2",
    "contact": {
      "name": "Khosraw Azizi",
      "email": "khosraw@pointer.so"
    },
    "servers": [
      "http://localhost:8080"
    ]
  },
  "tags": [],
  "paths": {
    "openapi": {
      "0": "3",
      "1": ".",
      "2": "0",
      "3": ".",
      "4": "3"
    },
    "/studysets/study-sets/{studySetId}/activities/{activityType}/start": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Start an activity session",
        "description": "Start a new activity session for a specific study set and activity type",
        "operationId": "startActivitySession",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "activityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MATCHING",
                "ASTEROID"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionToken": {
                      "type": "string"
                    },
                    "activityMetadata": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "studySetId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "sessionId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/activity-sessions/{sessionId}/data": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get activity data",
        "description": "Retrieve data for an ongoing activity session",
        "operationId": "getActivityData",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved activity data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Activity data structure depends on the activity type"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/activity-sessions/{sessionId}/flashcards": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get flashcards for activity session",
        "description": "Retrieve flashcards for an ongoing activity session",
        "operationId": "getFlashcardsUsingSession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved flashcards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flashcard"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/activity-sessions/{sessionId}/submit-round": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Submit activity round",
        "description": "Submit results for a round in an ongoing activity session",
        "operationId": "submitActivityRound",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "roundResult"
                ],
                "properties": {
                  "roundResult": {
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "integer"
                      },
                      "timeSpent": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Round submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nextRound": {
                      "type": "integer"
                    },
                    "timeRemaining": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/activity-sessions/{sessionId}/finish": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Finish activity session",
        "description": "Mark an activity session as completed",
        "operationId": "finishActivitySession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity session completed successfully"
          },
          "400": {
            "description": "Invalid or already completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/activity-results/{activityResultId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get activity results",
        "description": "Retrieve results for a completed activity session",
        "operationId": "getActivityResults",
        "parameters": [
          {
            "name": "activityResultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved activity results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Activity result not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/user/session-history": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get user session history",
        "description": "Retrieve session history for the current user",
        "operationId": "getUserSessionHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user session history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/QuizSession"
                      },
                      {
                        "$ref": "#/components/schemas/ActivitySession"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/session-history": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set session history",
        "description": "Retrieve session history for a specific study set",
        "operationId": "getStudySetSessionHistory",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set session history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/QuizSession"
                      },
                      {
                        "$ref": "#/components/schemas/ActivitySession"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access this study set session history"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/sessions/{sessionId}/progress": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get session progress",
        "description": "Retrieve progress for an ongoing session (quiz or activity)",
        "operationId": "getSessionProgress",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved session progress",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "quiz"
                          ]
                        },
                        "currentQuestionIndex": {
                          "type": "integer"
                        },
                        "totalQuestions": {
                          "type": "integer"
                        },
                        "timeRemaining": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "activity"
                          ]
                        },
                        "currentRound": {
                          "type": "integer"
                        },
                        "timeRemaining": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        },
                        "activityType": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "404": {
            "description": "Session not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/login/status": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check if user is logged in",
        "description": "Check if user is logged in",
        "operationId": "checkLoginStatus",
        "responses": {
          "200": {
            "description": "User is logged in, return user ID and status"
          },
          "401": {
            "description": "Unauthorized | User is not logged in"
          },
          "403": {
            "description": "Account is inactive"
          },
          "500": {
            "description": "Unable to check login status"
          }
        }
      }
    },
    "/auth/login/onboarded": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check if user is onboarded",
        "description": "Check if user is onboarded",
        "operationId": "checkOnboardedStatus",
        "responses": {
          "200": {
            "description": "User is onboarded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Account is inactive | User is not onboarded"
          },
          "500": {
            "description": "Unable to check onboarded status"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout a user",
        "description": "Logout a user",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "User successfully logged out | User already logged out"
          },
          "500": {
            "description": "Unable to signout"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google OAuth2.0",
        "description": "Redirect to Google OAuth2.0",
        "operationId": "googleOAuth",
        "parameters": [
          {
            "name": "redir",
            "in": "query",
            "description": "Redirect URL after successful login",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Redirect to Google OAuth2.0"
          },
          "400": {
            "description": "Bad request | User already logged in"
          },
          "500": {
            "description": "Unable to redirect to Google OAuth2.0"
          }
        }
      }
    },
    "/auth/google/additional-scopes": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google OAuth2.0",
        "description": "Redirect to Google OAuth2.0 with additional scopes for integration",
        "operationId": "googleOAuthAdditionalScopes",
        "parameters": [
          {
            "name": "redir",
            "in": "query",
            "description": "Redirect URL after successful login",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Redirect to Google OAuth2.0"
          },
          "400": {
            "description": "Bad request | User already logged in"
          },
          "500": {
            "description": "Unable to redirect to Google OAuth2.0"
          }
        }
      }
    },
    "/chatmessages/{messageId}": {
      "get": {
        "tags": [
          "Chat Message"
        ],
        "summary": "Get chat message by ID",
        "description": "Get chat message by ID",
        "operationId": "getChatMessageById",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "description": "ID of the chat message to get",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat message successfully retrieved"
          },
          "400": {
            "description": "Bad request | Invalid chat message ID"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User does not own message"
          },
          "404": {
            "description": "Chat message not found"
          },
          "500": {
            "description": "Error retrieving chat message"
          }
        }
      }
    },
    "/classes/me/all": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get all classes for the current user",
        "description": "Get all classes for the current user",
        "operationId": "getAllClassesForCurrentUser",
        "responses": {
          "200": {
            "description": "Classes successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Classroom"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Classes not found"
          },
          "500": {
            "description": "Error retrieving classes"
          }
        }
      }
    },
    "/classes/create": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Create a new class",
        "description": "Create a new class",
        "operationId": "createClass",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "className",
                  "description"
                ],
                "properties": {
                  "className": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  },
                  "gradeLevel": {
                    "type": "string"
                  },
                  "img": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Class successfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher"
          },
          "500": {
            "description": "Error creating classroom"
          }
        }
      }
    },
    "/classes/code/regenerate/{classroomId}": {
      "put": {
        "tags": [
          "Classroom"
        ],
        "summary": "Regenerate class code",
        "description": "Regenerate class code",
        "operationId": "regenerateClassCode",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to regenerate code for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class code successfully regenerated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "newCode": {
                      "type": "string",
                      "example": "HUW2D2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Class code can only be generated every 3 hours"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not part of the classroom"
          },
          "404": {
            "description": "Class not found"
          },
          "500": {
            "description": "Error regenerating class code"
          }
        }
      }
    },
    "/classes/all/students/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get all students in a class",
        "description": "Get all students in a class",
        "operationId": "getAllStudentsInClass",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to get students from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Students successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | No students found"
          },
          "500": {
            "description": "Error retrieving students"
          }
        }
      }
    },
    "/classes/all/teachers/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get all teachers in a class",
        "description": "Get all teachers in a class",
        "operationId": "getAllTeachersInClass",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to get teachers from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teachers successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | No teachers found"
          },
          "500": {
            "description": "Error retrieving teachers"
          }
        }
      }
    },
    "/classes/all/tas/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get all TAs in a class",
        "description": "Get all TAs in a class",
        "operationId": "getAllTAsInClass",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to get TAs from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TAs successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | No TAs found"
          },
          "500": {
            "description": "Error retrieving TAs"
          }
        }
      }
    },
    "/classes/classroom/class-code/{classCode}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get class by class code",
        "description": "Get class by class code",
        "operationId": "getClassByClassCode",
        "parameters": [
          {
            "name": "classCode",
            "in": "path",
            "required": true,
            "description": "Class code to get class by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classroom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Class not found"
          },
          "500": {
            "description": "Error retrieving class"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get class by ID",
        "description": "Get class by ID",
        "operationId": "getClassById",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to get",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classroom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not part of the classroom"
          },
          "404": {
            "description": "Class not found"
          },
          "500": {
            "description": "Error retrieving class"
          }
        }
      }
    },
    "/classes/classroom/join": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Join a class",
        "description": "Join a class",
        "operationId": "joinClass",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "classCode"
                ],
                "properties": {
                  "classCode": {
                    "type": "string",
                    "example": "JDIH23"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Class successfully joined"
          },
          "400": {
            "description": "Bad request | User already in classroom | Invalid classroom code"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a student"
          },
          "404": {
            "description": "Class not found"
          },
          "500": {
            "description": "Error joining class"
          }
        }
      }
    },
    "/classes/classroom/leave/{classroomId}": {
      "delete": {
        "tags": [
          "Classroom"
        ],
        "summary": "Leave a class",
        "description": "Leave a class",
        "operationId": "leaveClass",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to leave",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class successfully left"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a student"
          },
          "404": {
            "description": "Class not found | User not in classroom"
          },
          "500": {
            "description": "Error leaving class"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/kick/{userId}": {
      "delete": {
        "tags": [
          "Classroom"
        ],
        "summary": "Kick a user from class",
        "description": "Kick a user from class",
        "operationId": "kickUserFromClass",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to kick from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "ID of the user to kick",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully kicked student from class"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | User is not part of the class"
          },
          "500": {
            "description": "Error adding TA"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/add-ta/{taId}": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Add a TA to a class",
        "description": "Add a TA to a class",
        "operationId": "addTA",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to add TA to",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA to add",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA successfully added"
          },
          "400": {
            "description": "Bad request | TA already in class"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | TA not found"
          },
          "500": {
            "description": "Error adding TA"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/remove-ta/{taId}": {
      "delete": {
        "tags": [
          "Classroom"
        ],
        "summary": "Remove a TA from a class",
        "description": "Remove a TA from a class",
        "operationId": "removeTA",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to remove TA from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA to remove",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA successfully removed"
          },
          "400": {
            "description": "Bad request | TA not in class"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | TA not found"
          },
          "500": {
            "description": "Error removing TA"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/publish-ta/{taId}": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Publish a TA in a class",
        "description": "Publish a TA in a class",
        "operationId": "publishTA",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to publish TA in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA to publish",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA successfully published"
          },
          "400": {
            "description": "Bad request | TA already published"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | TA not found"
          },
          "500": {
            "description": "Error publishing TA"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/unpublish-ta/{taId}": {
      "delete": {
        "tags": [
          "Classroom"
        ],
        "summary": "Unpublish a TA in a class",
        "description": "Unpublish a TA in a class",
        "operationId": "unpublishTA",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to unpublish TA in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA to unpublish",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA successfully unpublished"
          },
          "400": {
            "description": "Bad request | TA not published"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Class not found | TA not found"
          },
          "500": {
            "description": "Error unpublishing TA"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/topic-overview": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get classroom topic overview",
        "description": "Get classroom topic overview",
        "operationId": "getClassroomTopicOverview",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to get topic overview for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Classroom topic overview successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassroomTopicOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Classroom topic overview not found"
          },
          "500": {
            "description": "Error retrieving classroom topic overview"
          }
        }
      }
    },
    "/classes/classroom/{classroomId}/topic-overview/generate": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Generate classroom topic overview",
        "description": "Generate classroom topic overview",
        "operationId": "generateClassroomTopicOverview",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the class to generate topic overview for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recent topic overview already exists",
            "content": {
              "application/json": {
                "schemas": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Topic overview already generated for this classroom"
                    },
                    "topicOverview": {
                      "$ref": "#/components/schemas/ClassroomTopicOverview"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Classroom topic overview successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassroomTopicOverview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "500": {
            "description": "Error generating classroom topic overview"
          }
        }
      }
    },
    "/classes/student/{studentId}/insights/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get insights for a student",
        "description": "Retrieve the latest generated insights for a student in a specific classroom",
        "operationId": "getStudentInsights",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "required": true,
            "description": "ID of the student to get insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the classroom to get insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "studentInsight": {
                      "$ref": "#/components/schemas/StudentInsight"
                    },
                    "accuracyMapping": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-01"
                          },
                          "accuracyScore": {
                            "type": "number",
                            "example": 85
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Student insights not found"
          },
          "500": {
            "description": "Error fetching student insights"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/classes/student/my/insights/{classroomId}/generate": {
      "post": {
        "200": {
          "description": "Recent insight already exists",
          "content": {
            "application/json": {
              "schemas": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Insights already generated for this student in this classroom"
                  },
                  "insight": {
                    "$ref": "#/components/schemas/StudentInsight"
                  }
                }
              }
            }
          }
        },
        "201": {
          "description": "Insights successfully generated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentInsight"
              }
            }
          }
        },
        "400": {
          "description": "Bad request | User is not a student"
        },
        "401": {
          "description": "Unauthorized"
        },
        "403": {
          "description": "User is inactive | User is not a student | User is not a part of the classroom"
        },
        "500": {
          "description": "Error generating student insights"
        },
        "tags": [
          "Classroom"
        ],
        "summary": "Generate insights for the current student in a class if one hasn't been created yet or in the last 7 days",
        "description": "Generate insights for the current student in a specific classroom",
        "operationId": "generateInsights",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the classroom to generate insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": null
      }
    },
    "/classes/student/{studentId}/insights/generate/{classroomId}": {
      "post": {
        "200": {
          "description": "Recent insight already exists",
          "content": {
            "application/json": {
              "schemas": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Insights already generated for this student in this classroom"
                  },
                  "insight": {
                    "$ref": "#/components/schemas/StudentInsight"
                  }
                }
              }
            }
          }
        },
        "201": {
          "description": "Insights successfully generated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentInsight"
              }
            }
          }
        },
        "400": {
          "description": "Bad request | User is not a teacher"
        },
        "401": {
          "description": "Unauthorized"
        },
        "403": {
          "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
        },
        "500": {
          "description": "Error generating student insights"
        },
        "tags": [
          "Classroom"
        ],
        "summary": "Generate insights for a student in a class if one hasn",
        "description": "Generate insights for a student in a specific classroom",
        "operationId": "generateInsightsForStudent",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "required": true,
            "description": "ID of the student to generate insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the classroom to generate insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": null
      }
    },
    "/classes/student/my/insights/classroom/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get insight for the current student in a class",
        "description": "Retrieve the latest generated insights for the current student in a specific classroom",
        "operationId": "getMyInsight",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the classroom to get insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "studentInsight": {
                      "$ref": "#/components/schemas/StudentInsight"
                    },
                    "accuracyMapping": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-01"
                          },
                          "accuracyScore": {
                            "type": "number",
                            "example": 85
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a student | User is not a part of the classroom"
          },
          "404": {
            "description": "Student insights not found"
          },
          "500": {
            "description": "Error fetching student insights"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/classes/insights/{classroomId}": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get insights for all students in a classroom",
        "description": "Retrieve the latest generated insights for all students in a specific classroom",
        "operationId": "getClassroomStudentInsights",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "ID of the classroom to get insights for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudentInsight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "404": {
            "description": "Student insights not found"
          },
          "500": {
            "description": "Error fetching student insights"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/classes/insights/all/me": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get insights for the current student in all their classrooms",
        "description": "Retrieve the latest generated insights for the current student across all classrooms they are enrolled in",
        "operationId": "getAllUserInsightsForAllClassrooms",
        "responses": {
          "200": {
            "description": "Insights successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "classroom": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "className": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "section": {
                            "type": "string",
                            "nullable": true
                          },
                          "gradeLevel": {
                            "type": "string",
                            "nullable": true
                          },
                          "img": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      },
                      "studentInsights": {
                        "$ref": "#/components/schemas/StudentInsight"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a student"
          },
          "404": {
            "description": "No classrooms found"
          },
          "500": {
            "description": "Error getting classroom insights"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/classes/update/{classroomId}": {
      "put": {
        "tags": [
          "Classroom"
        ],
        "summary": "Update a classroom details.",
        "description": "Update a classroom's details by its ID.",
        "operationId": "updateClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "The classroom ID identifying the classroom to be modified.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Classroom"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the classroom successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classroom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "500": {
            "description": "Error updating the classroom"
          }
        }
      }
    },
    "/classes/delete/{classroomId}": {
      "delete": {
        "tags": [
          "Classroom"
        ],
        "summary": "Delete a classroom.",
        "description": "Deleted a classroom's details by its ID.",
        "operationId": "deleteClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "description": "The classroom ID identifying the classroom to be deleted.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted the classroom successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not a part of the classroom"
          },
          "500": {
            "description": "Error deleting classroom"
          }
        }
      }
    },
    "/classes/import/list": {
      "get": {
        "tags": [
          "Classroom"
        ],
        "summary": "Get all importable classes",
        "description": "Get all importable classes",
        "operationId": "getAllImportableClasses",
        "responses": {
          "200": {
            "description": "Importable classes successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "section": {
                        "type": "string"
                      },
                      "room": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "creationTime": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "enrollmentCode": {
                        "type": "string"
                      },
                      "teacherCount": {
                        "type": "number"
                      },
                      "studentCount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Importable classes not found | No google classrooms found"
          },
          "500": {
            "description": "Error retrieving importable classes"
          }
        }
      }
    },
    "/classes/import/{googleClassroomId}": {
      "post": {
        "tags": [
          "Classroom"
        ],
        "summary": "Import a class",
        "description": "Import a class",
        "operationId": "importClass",
        "parameters": [
          {
            "name": "googleClassroomId",
            "in": "path",
            "required": true,
            "description": "ID of the google classroom to import",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classroom"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Class already imported"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher"
          },
          "404": {
            "description": "Google classroom not found"
          },
          "500": {
            "description": "Error importing class | Error fetching classroom data from google | Error creating classroom"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/flashcards": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Create a new flashcard",
        "description": "Create a new flashcard in a specific study set",
        "operationId": "createFlashcard",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set to add the flashcard to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "term",
                  "definition"
                ],
                "properties": {
                  "term": {
                    "type": "string",
                    "description": "The term for the flashcard"
                  },
                  "definition": {
                    "type": "string",
                    "description": "The definition for the flashcard"
                  },
                  "isStarred": {
                    "type": "boolean",
                    "description": "Whether the flashcard is starred"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flashcard created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flashcard"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to add flashcards"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get all flashcards in a study set",
        "description": "Retrieve all flashcards associated with a specific study set",
        "operationId": "getFlashcards",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set to get flashcards from"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved flashcards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flashcard"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/flashcards/{flashcardId}": {
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a flashcard",
        "description": "Update the content of a specific flashcard",
        "operationId": "updateFlashcard",
        "parameters": [
          {
            "name": "flashcardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the flashcard to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "term",
                  "definition"
                ],
                "properties": {
                  "term": {
                    "type": "string",
                    "description": "The new term for the flashcard"
                  },
                  "definition": {
                    "type": "string",
                    "description": "The new definition for the flashcard"
                  },
                  "isStarred": {
                    "type": "boolean",
                    "description": "Whether the flashcard is starred"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flashcard updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flashcard"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to update this flashcard"
          },
          "404": {
            "description": "Flashcard not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a flashcard",
        "description": "Delete a specific flashcard",
        "operationId": "deleteFlashcard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the flashcard to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Flashcard deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this flashcard"
          },
          "404": {
            "description": "Flashcard not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/flashcards/{studySetId}/multiple": {
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update multiple flashcards",
        "description": "Update multiple flashcards in a specific study set",
        "operationId": "updateMultipleFlashcards",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set containing the flashcards"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "flashcards"
                ],
                "properties": {
                  "flashcards": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Flashcard"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flashcards updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flashcard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to update these flashcards"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/flashcards/{flashcardId}/order": {
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update flashcard order",
        "description": "Update the order of a specific flashcard within its study set",
        "operationId": "updateFlashcardOrder",
        "parameters": [
          {
            "name": "flashcardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the flashcard to reorder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newOrder"
                ],
                "properties": {
                  "newOrder": {
                    "type": "integer",
                    "description": "The new order position for the flashcard"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flashcard order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flashcard"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to update this flashcard order"
          },
          "404": {
            "description": "Flashcard not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/graders/{classroomId}": {
      "get": {
        "tags": [
          "Grader"
        ],
        "summary": "Get all graders for a classroom",
        "description": "Get all graders for a specific classroom",
        "operationId": "getGradersByClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "ID of the classroom to get graders for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Graders successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Grader"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No graders found for classroom"
          },
          "500": {
            "description": "Error getting graders for classroom"
          }
        }
      }
    },
    "/graders/grader/{graderId}": {
      "get": {
        "tags": [
          "Grader"
        ],
        "summary": "Get grader by ID",
        "description": "Get a specific grader by ID",
        "operationId": "getGraderById",
        "parameters": [
          {
            "name": "graderId",
            "in": "path",
            "description": "ID of the grader to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grader successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grader"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Grader not found"
          },
          "500": {
            "description": "Error getting grader"
          }
        }
      }
    },
    "/graders/create": {
      "post": {
        "tags": [
          "Grader"
        ],
        "summary": "Create a new grader",
        "description": "Create a new grader for assignments",
        "operationId": "createGrader",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "totalPoints",
                  "resourceId",
                  "classroomId"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "totalPoints": {
                    "type": "integer"
                  },
                  "resourceId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "classroomId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "gradingNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Grader successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grader"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error creating grader"
          }
        }
      }
    },
    "/graders/grade": {
      "post": {
        "tags": [
          "Grader"
        ],
        "summary": "Grade assignments",
        "description": "Grade assignments using a specific grader",
        "operationId": "gradeAssignments",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "graderId"
                ],
                "properties": {
                  "graderId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Grading process initiated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Grader not found"
          },
          "500": {
            "description": "Error initiating grading process"
          }
        }
      }
    },
    "/graders/graded/{graderId}": {
      "get": {
        "tags": [
          "Graded Assignment"
        ],
        "summary": "Get graded assignments by grader",
        "description": "Get all graded assignments for a specific grader",
        "operationId": "getGradedAssignmentsByGrader",
        "parameters": [
          {
            "name": "graderId",
            "in": "path",
            "description": "ID of the grader to get graded assignments for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Graded assignments successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GradedAssignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No graded assignments found for grader"
          },
          "500": {
            "description": "Error getting graded assignments"
          }
        }
      }
    },
    "/graders/graded/details/{gradedAssignmentId}": {
      "get": {
        "tags": [
          "Graded Assignment"
        ],
        "summary": "Get graded assignment details",
        "description": "Get detailed information about a specific graded assignment",
        "operationId": "getGradedAssignmentDetails",
        "parameters": [
          {
            "name": "gradedAssignmentId",
            "in": "path",
            "description": "ID of the graded assignment to get details for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Graded assignment details successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "studentName": {
                      "type": "string"
                    },
                    "chainOfReasoning": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "points": {
                            "type": "integer"
                          },
                          "comments": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "assignmentTitle": {
                      "type": "string"
                    },
                    "grade": {
                      "type": "integer"
                    },
                    "maxPoints": {
                      "type": "integer"
                    },
                    "reasons": {
                      "type": "string"
                    },
                    "strengths": {
                      "type": "string"
                    },
                    "weaknesses": {
                      "type": "string"
                    },
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "fileId": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Graded assignment not found"
          },
          "500": {
            "description": "Error getting graded assignment details"
          }
        }
      }
    },
    "/graders/{graderId}": {
      "delete": {
        "tags": [
          "Grader"
        ],
        "summary": "Delete a grader",
        "description": "Delete a specific grader",
        "operationId": "deleteGrader",
        "parameters": [
          {
            "name": "graderId",
            "in": "path",
            "description": "ID of the grader to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Grader successfully deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Grader not found"
          },
          "500": {
            "description": "Error deleting grader"
          }
        }
      },
      "put": {
        "tags": [
          "Grader"
        ],
        "summary": "Edit a grader",
        "description": "Edit a specific grader",
        "operationId": "editGrader",
        "parameters": [
          {
            "name": "graderId",
            "in": "path",
            "description": "ID of the grader to edit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "totalPoints",
                  "gradingNotes"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "totalPoints": {
                    "type": "integer"
                  },
                  "gradingNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Grader successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grader"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Grader not found"
          },
          "500": {
            "description": "Error updating grader"
          }
        }
      }
    },
    "/graders/graded/{gradedAssignmentId}/send-email": {
      "post": {
        "tags": [
          "Graded Assignment"
        ],
        "summary": "Send graded assignment email",
        "description": "Send an email notification about a graded assignment to the student",
        "operationId": "sendGradedAssignmentEmail",
        "parameters": [
          {
            "name": "gradedAssignmentId",
            "in": "path",
            "description": "ID of the graded assignment to send email for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Graded assignment not found"
          },
          "500": {
            "description": "Error sending email"
          }
        }
      }
    },
    "/materials/single/{userId}/{classroomId}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials for a specific user in a classroom",
        "description": "Retrieves all materials created by a specific user for a specific classroom. This endpoint requires the user to be part of the classroom.",
        "operationId": "getUserClassroomMaterials",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user whose materials are being retrieved",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "description": "The ID of the classroom for which materials are being retrieved",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Materials retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters"
          },
          "403": {
            "description": "Forbidden - User is not part of the classroom"
          },
          "404": {
            "description": "No materials found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/single/{materialId}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get a single material by ID",
        "description": "Retrieves a specific material by its ID. This endpoint requires the user to have access to the material.",
        "operationId": "getMaterialById",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The ID of the material to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Material retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter"
          },
          "403": {
            "description": "Forbidden - User does not have access to this material"
          },
          "404": {
            "description": "Material not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/user/me": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials for the logged-in user",
        "description": "Retrieves all materials created by the currently logged-in user across all classrooms.",
        "operationId": "getLoggedInUserMaterials",
        "responses": {
          "200": {
            "description": "Materials retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "materialType": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "classroomId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": {
                        "type": "string"
                      },
                      "summary": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No materials found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/classroom/{classroomId}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials for a specific classroom",
        "description": "Retrieves all materials associated with a specific classroom. This endpoint requires the user to be part of the classroom.",
        "operationId": "getClassroomMaterials",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "The ID of the classroom for which materials are being retrieved",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Materials retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "materialType": {
                        "type": "string",
                        "enum": [
                          "Lesson Plan",
                          "Class Activity",
                          "Assessment"
                        ]
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "classroomId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": {
                        "type": "string"
                      },
                      "summary": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter"
          },
          "403": {
            "description": "Forbidden - User is not part of the classroom"
          },
          "404": {
            "description": "Classroom not found or no materials found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/generate/summary/{classroomId}": {
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Generate a summary for a new material",
        "description": "Generates a summary for a new material using AI and creates the material in the database. This endpoint requires the user to be part of the classroom.",
        "operationId": "generateMaterialSummary",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "The ID of the classroom for which the material is being created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "materialType",
                  "duration",
                  "description"
                ],
                "properties": {
                  "materialType": {
                    "type": "string",
                    "enum": [
                      "Lesson Plan",
                      "Class Activity",
                      "Assessment"
                    ]
                  },
                  "duration": {
                    "type": "string",
                    "description": "Expected duration of the material (e.g., \"1 hour\", \"30 minutes\")"
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the material's content and purpose"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Material summary generated and material created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters"
          },
          "403": {
            "description": "Forbidden - User is not part of the classroom"
          },
          "404": {
            "description": "Classroom not found"
          },
          "422": {
            "description": "Unprocessable Entity - AI generation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/generate/content/{materialId}": {
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Generate content for a material",
        "description": "Generate content for a material based on its type (Lesson Plan, Class Activity, or Assessment)",
        "operationId": "generateMaterialContent",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The unique identifier of the material",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Material content generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid material type"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive or lacks permission"
          },
          "404": {
            "description": "Material not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Material not found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error in content generation"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error generating material content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/materials/generate/resources/{materialId}": {
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Generate resources for a material",
        "description": "Generates additional resources for a material using AI. This endpoint works for all material types (Lesson Plan, Class Activity, Assessment) and requires the user to have access to the material.",
        "operationId": "generateResources",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The ID of the material for which resources are being generated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter"
          },
          "403": {
            "description": "Forbidden - User does not have access to this material"
          },
          "404": {
            "description": "Material not found"
          },
          "422": {
            "description": "Unprocessable Entity - AI generation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/regenerate/{materialId}": {
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Regenerate material content",
        "description": "Regenerates specific content for a material based on requested changes. This endpoint works for all material types and requires the user to have access to the material.",
        "operationId": "regenerateMaterial",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The ID of the material to be regenerated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "changes"
                ],
                "properties": {
                  "changes": {
                    "type": "string",
                    "description": "Description of the changes to be made to the material"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Material content regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter or material type"
          },
          "403": {
            "description": "Forbidden - User does not have access to this material"
          },
          "404": {
            "description": "Material not found"
          },
          "422": {
            "description": "Unprocessable Entity - AI generation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/update/{materialId}": {
      "put": {
        "tags": [
          "Material"
        ],
        "summary": "Update a material by ID",
        "description": "Updates specific fields of a material. This endpoint requires the user to have access to the material.",
        "operationId": "updateMaterialById",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The ID of the material to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Material updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters"
          },
          "403": {
            "description": "Forbidden - User does not have access to this material"
          },
          "404": {
            "description": "Material not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/materials/delete/{materialId}": {
      "delete": {
        "tags": [
          "Material"
        ],
        "summary": "Delete a material by ID",
        "description": "Deletes a material. This endpoint requires the user to have access to the material.",
        "operationId": "deleteMaterialById",
        "parameters": [
          {
            "name": "materialId",
            "in": "path",
            "description": "The ID of the material to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Material deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Material deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter"
          },
          "403": {
            "description": "Forbidden - User does not have access to this material"
          },
          "404": {
            "description": "Material not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "info": {
      "title": "Stripe API",
      "description": "API for managing Stripe subscriptions and payments",
      "version": "1.0.0"
    },
    "/notes/me": {
      "get": {
        "summary": "Get notes for the authenticated user",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/create/single": {
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a new note",
        "operationId": "createNote",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true
                  },
                  "content": {
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}": {
      "get": {
        "summary": "Get a specific note by ID",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update a specific note",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific note",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted note",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Note deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/source/{sourceType}": {
      "get": {
        "summary": "Get notes by source type for the authenticated user",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sourceType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "AUDIO",
                "VIDEO",
                "DOCUMENT"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/recent": {
      "get": {
        "summary": "Get recent notes for the authenticated user",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved recent notes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/classrooms/{noteId}": {
      "get": {
        "summary": "Get classrooms where a note has been added",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms where note has been added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Classroom"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/add/{classroomId}": {
      "post": {
        "summary": "Add a note to a classroom",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added note to classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/remove/{classroomId}": {
      "delete": {
        "summary": "Remove a note from a classroom",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed note from classroom",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Note removed from classroom successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/publish/{classroomId}": {
      "post": {
        "summary": "Publish a note to a classroom (only for teachers)",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully published note to classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/{noteId}/unpublish/{classroomId}": {
      "delete": {
        "summary": "Unpublish a note from a classroom (only for teachers)",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unpublished note from classroom"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/note/published/classrooms/{noteId}": {
      "get": {
        "summary": "Get classrooms where a note has been published",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "noteId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms where note has been published",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteClassrooms"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/classroom/{classroomId}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Get notes that have been added to a classroom",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroomId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully grabbed all notes from classroom",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#components/schemas/Note"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/file": {
      "post": {
        "summary": "Generate a note from a file",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/audio": {
      "post": {
        "summary": "Generate a note from an audio file",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/notes/generate/youtube": {
      "post": {
        "summary": "Generate a note from a YouTube video",
        "tags": [
          "Note"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "youtubeUrl"
                ],
                "properties": {
                  "youtubeUrl": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "NoteUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "The request was invalid or cannot be served",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntityError": {
        "description": "The request was well-formed but was unable to be followed due to semantic errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "/studysets/quizzes": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Create a new quiz",
        "description": "Create a new quiz for a specific study set",
        "operationId": "createQuiz",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "studySetId",
                  "title",
                  "questionCount",
                  "answerType",
                  "questionTypes"
                ],
                "properties": {
                  "studySetId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "questionCount": {
                    "type": "integer"
                  },
                  "answerType": {
                    "type": "string",
                    "enum": [
                      "TERM",
                      "DEFINITION",
                      "MIXED"
                    ]
                  },
                  "questionTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "TRUE_FALSE",
                        "MULTIPLE_CHOICE",
                        "WRITTEN",
                        "KNOWLEDGE_APPLICATION"
                      ]
                    }
                  },
                  "additionalNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/quizzes": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get quizzes for a study set",
        "description": "Retrieve all quizzes associated with a specific study set",
        "operationId": "getQuizzesByStudySet",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quizzes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Quiz"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get a specific quiz",
        "description": "Retrieve a specific quiz by its ID",
        "operationId": "getQuizById",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizWithQuestions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a quiz",
        "description": "Update a specific quiz",
        "operationId": "updateQuiz",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "questionCount",
                  "answerType",
                  "questionTypes"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "questionCount": {
                    "type": "integer"
                  },
                  "answerType": {
                    "type": "string",
                    "enum": [
                      "TERM",
                      "DEFINITION",
                      "MIXED"
                    ]
                  },
                  "questionTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "TRUE_FALSE",
                        "MULTIPLE_CHOICE",
                        "WRITTEN",
                        "KNOWLEDGE_APPLICATION"
                      ]
                    }
                  },
                  "additionalNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiz updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a quiz",
        "description": "Delete a specific quiz",
        "operationId": "deleteQuiz",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Quiz deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}/questions": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Add a question to a quiz",
        "description": "Add a new question to a specific quiz",
        "operationId": "addQuizQuestion",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "questionType",
                  "question",
                  "correctAnswer"
                ],
                "properties": {
                  "questionType": {
                    "type": "string",
                    "enum": [
                      "TRUE_FALSE",
                      "MULTIPLE_CHOICE",
                      "WRITTEN",
                      "KNOWLEDGE_APPLICATION"
                    ]
                  },
                  "question": {
                    "type": "string"
                  },
                  "correctAnswer": {
                    "type": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Question added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestion"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-questions/{questionId}": {
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a quiz question",
        "description": "Update a specific quiz question",
        "operationId": "updateQuizQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "questionType",
                  "question",
                  "correctAnswer"
                ],
                "properties": {
                  "questionType": {
                    "type": "string",
                    "enum": [
                      "TRUE_FALSE",
                      "MULTIPLE_CHOICE",
                      "WRITTEN",
                      "KNOWLEDGE_APPLICATION"
                    ]
                  },
                  "question": {
                    "type": "string"
                  },
                  "correctAnswer": {
                    "type": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestion"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz question"
          },
          "404": {
            "description": "Quiz question not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a quiz question",
        "description": "Delete a specific quiz question",
        "operationId": "deleteQuizQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this quiz question"
          },
          "404": {
            "description": "Quiz question not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quizzes/{quizId}/start": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Start a quiz session",
        "description": "Start a new session for a specific quiz",
        "operationId": "startQuizSession",
        "parameters": [
          {
            "name": "quizId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Quiz session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessionToken": {
                      "type": "string"
                    },
                    "quizMetadata": {
                      "type": "object",
                      "properties": {
                        "totalQuestions": {
                          "type": "integer"
                        },
                        "studySetId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "sessionId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this quiz"
          },
          "404": {
            "description": "Quiz not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-sessions/{sessionId}/question": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get current quiz questions",
        "description": "Retrieve all questions for the current quiz session",
        "operationId": "getCurrentQuizQuestion",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz questions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "questions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QuizQuestion"
                      }
                    },
                    "timeRemaining": {
                      "type": "integer"
                    },
                    "totalQuestions": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "404": {
            "description": "No questions found for this quiz"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-sessions/{sessionId}/submit-all": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Submit all quiz answers",
        "description": "Submit all answers for a quiz session",
        "operationId": "submitAllQuizAnswers",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "answers"
                ],
                "properties": {
                  "answers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "questionId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "answer": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiz completed successfully"
          },
          "400": {
            "description": "Invalid or completed session"
          },
          "401": {
            "description": "Unauthorized - invalid session token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/quiz-results/{sessionId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get quiz results",
        "description": "Retrieve results for a completed quiz session",
        "operationId": "getQuizResults",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Quiz result not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get a resource",
        "description": "Get a resource by its ID",
        "operationId": "getResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "description": "ID of the resource object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Error getting resource"
          }
        }
      }
    },
    "/resources/url/{url}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get a resource by URL",
        "description": "Get a resource by its URL",
        "operationId": "getResourceByUrl",
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "required": true,
            "description": "URL of the resource object",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Error getting resource"
          }
        }
      }
    },
    "/resources/create": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a resource",
        "description": "Create a resource",
        "operationId": "createResource",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error creating resource"
          }
        }
      }
    },
    "/resources/create/openai": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a resource from OpenAI",
        "description": "Create a resource from OpenAI",
        "operationId": "createResourceFromOpenAI",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | No file uploaded | Invalid file format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error creating resource from OpenAI"
          }
        }
      }
    },
    "/resources/create/combined": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a resource at both URL and OpenAI",
        "description": "Create a resource at both URL and OpenAI",
        "operationId": "createResourceCombined",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | No file uploaded | Invalid file format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error creating resource at both URL and OpenAI"
          }
        }
      }
    },
    "/stripe/checkout/{plan}/{period}": {
      "get": {
        "summary": "Get checkout link for a subscription plan",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PLUS",
                "PRO"
              ]
            }
          },
          {
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "monthly",
                "yearly"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created checkout session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/callback/{session_id}": {
      "post": {
        "summary": "Handle Stripe checkout callback",
        "tags": [
          "Stripe"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed checkout session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/portal": {
      "get": {
        "summary": "Get Stripe customer portal link",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created customer portal session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/change-plan": {
      "post": {
        "summary": "Change subscription plan",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPlan",
                  "period"
                ],
                "properties": {
                  "newPlan": {
                    "type": "string",
                    "enum": [
                      "PLUS",
                      "PRO"
                    ]
                  },
                  "period": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "yearly"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully changed subscription plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "subscription": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stripe/proration-review": {
      "post": {
        "summary": "Review proration for subscription plan change",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPlan",
                  "period"
                ],
                "properties": {
                  "newPlan": {
                    "type": "string",
                    "enum": [
                      "PLUS",
                      "PRO"
                    ]
                  },
                  "period": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "yearly"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully calculated proration rates for subscription plan change",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "subscription": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "405": {
            "$ref": "#/components/responses/MethodNotAllowedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/cancel-subscription": {
      "post": {
        "summary": "Cancel subscription and delete Stripe customer",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully cancelled subscription and deleted customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Subscription cancelled and customer deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/current-subscription": {
      "get": {
        "summary": "Get current subscription for a user",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "string",
                      "enum": [
                        "FREE",
                        "PLUS",
                        "PRO"
                      ]
                    },
                    "period": {
                      "type": "string",
                      "enum": [
                        "monthly",
                        "yearly"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/stripe/referral/{code}": {
      "post": {
        "summary": "Apply a referral code and create trial subscriptions",
        "tags": [
          "Stripe"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The referral code to apply"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied referral and created trial subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Referral applied successfully"
                    },
                    "subscription": {
                      "type": "string",
                      "description": "The ID of the created Stripe subscription"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid referral or user not eligible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/studysets/study-sets": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Create a new study set",
        "description": "Create a new study set with flashcards and an associated TA",
        "operationId": "createStudySet",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "flashcards"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the study set"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the study set"
                  },
                  "flashcards": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "term": {
                          "type": "string",
                          "description": "The term for the flashcard"
                        },
                        "definition": {
                          "type": "string",
                          "description": "The definition for the flashcard"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Study set created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    },
                    "flashcards": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flashcard"
                      }
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get all study sets for the user",
        "description": "Retrieve all study sets associated with the authenticated user",
        "operationId": "getUserStudySets",
        "responses": {
          "200": {
            "description": "Successfully retrieved study sets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudySet"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/published/classrooms/{studySetId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get all classrooms for a published study set",
        "description": "Retrieve all classrooms associated with a published study set",
        "operationId": "getPublishedStudySetClassrooms",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudySetClassroom"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get a specific study set",
        "description": "Retrieve a specific study set by its ID",
        "operationId": "getStudySet",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudySet"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Study Set"
        ],
        "summary": "Update a study set",
        "description": "Update the title and description of a specific study set",
        "operationId": "updateStudySet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The new title of the study set"
                  },
                  "description": {
                    "type": "string",
                    "description": "The new description of the study set"
                  },
                  "spacing": {
                    "type": "boolean",
                    "description": "Whether the spacing method is used for the study set"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Study set updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudySet"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to update this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Delete a study set",
        "description": "Delete a specific study set by its ID",
        "operationId": "deleteStudySet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the study set to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Study set deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to delete this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-set-progress": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Create or update study set progress",
        "description": "Create or update progress for a specific flashcard in a study set",
        "operationId": "createOrUpdateProgress",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "studySetId",
                  "flashcardId",
                  "status"
                ],
                "properties": {
                  "studySetId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "flashcardId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "NEW",
                      "LEARNING",
                      "MASTERED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Progress updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudySetProgress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/progress": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set progress",
        "description": "Retrieve progress for a specific study set",
        "operationId": "getStudySetProgress",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set progress",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudySetProgress"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/progress-stats": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set progress statistics",
        "description": "Retrieve progress statistics for a specific study set",
        "operationId": "getStudySetProgressStats",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set progress statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudySetProgressStats"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/classrooms": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Add study set to classroom",
        "description": "Associate a study set with a classroom",
        "operationId": "addStudySetToClassroom",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "classroomId"
                ],
                "properties": {
                  "classroomId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Study set added to classroom successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to add study set to classroom"
          },
          "404": {
            "description": "Classroom not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get classrooms for study set",
        "description": "Retrieve all classrooms associated with a study set",
        "operationId": "getClassroomsForStudySet",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved classrooms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Classroom"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access classrooms"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/publish/{classroomId}": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Publish study set to classroom",
        "description": "Publish a study set to a classroom",
        "operationId": "publishStudySetToClassroom",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Study set published to classroom successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to publish study set to classroom"
          },
          "404": {
            "description": "Classroom not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/unpublish/{classroomId}": {
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Unpublish study set from classroom",
        "description": "Unpublish a study set from a classroom",
        "operationId": "unpublishStudySetFromClassroom",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Study set unpublished from classroom successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to unpublish study set from classroom"
          },
          "404": {
            "description": "Classroom not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/classrooms/{classroomId}": {
      "delete": {
        "tags": [
          "Study Set"
        ],
        "summary": "Remove study set from classroom",
        "description": "Disassociate a study set from a classroom",
        "operationId": "removeStudySetFromClassroom",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Study set removed from classroom successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to remove study set from classroom"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/classrooms/{classroomId}/study-sets": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study sets for classroom",
        "description": "Retrieve all study sets associated with a classroom",
        "operationId": "getStudySetsForClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study sets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudySet"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/generate": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Generate study set",
        "description": "Generate a new study set based on description and optional file",
        "operationId": "generateStudySet",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "description"
                ],
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Study set generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    },
                    "flashcards": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flashcard"
                      }
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity - invalid input for generation"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/generate-quiz": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Generate quiz from study set",
        "description": "Generate a new quiz based on an existing study set",
        "operationId": "generateQuizFromStudySet",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "numQuestions",
                  "questionTypes",
                  "answerType"
                ],
                "properties": {
                  "numQuestions": {
                    "type": "integer"
                  },
                  "questionTypes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "MULTIPLE_CHOICE",
                        "TRUE_FALSE",
                        "WRITTEN",
                        "KNOWLEDGE_APPLICATION"
                      ]
                    }
                  },
                  "answerType": {
                    "type": "string",
                    "enum": [
                      "TERM",
                      "DEFINITION",
                      "MIXED"
                    ]
                  },
                  "additionalNotes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quiz": {
                      "$ref": "#/components/schemas/Quiz"
                    },
                    "questions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QuizQuestion"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - invalid answer type"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have access to this study set"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/notes/{noteId}/generate-study-set": {
      "post": {
        "tags": [
          "Study Set"
        ],
        "summary": "Generate study set from note",
        "description": "Generate a new study set based on an existing note",
        "operationId": "generateStudySetFromNote",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Study set generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    },
                    "flashcards": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flashcard"
                      }
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access this note"
          },
          "404": {
            "description": "Note not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/analytics": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set analytics",
        "description": "Retrieve analytics for a specific study set",
        "operationId": "getStudySetAnalytics",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set analytics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudySetAnalytics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access analytics"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/top-performers": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set leaderboard",
        "description": "Retrieve top performers for a specific study set",
        "operationId": "getStudySetLeaderboard",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set leaderboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LeaderboardEntry"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access leaderboard"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/studysets/study-sets/{studySetId}/recent-activity": {
      "get": {
        "tags": [
          "Study Set"
        ],
        "summary": "Get study set recent activity",
        "description": "Retrieve recent activity for a specific study set",
        "operationId": "getStudySetRecentActivity",
        "parameters": [
          {
            "name": "studySetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved study set recent activity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - user doesn't have permission to access recent activity"
          },
          "404": {
            "description": "Study set not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tas/all/me/teacher": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get all TAs for the current user as a teacher",
        "description": "Get all TAs for the current user as a teacher",
        "operationId": "getTAsForTeacher",
        "responses": {
          "200": {
            "description": "TAs retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TAs not found"
          },
          "500": {
            "description": "Error getting TAs"
          }
        }
      }
    },
    "/tas/all/me/teacher/study-set": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get all TAs for the current user as a teacher which are meant for study sets",
        "description": "Get all TAs for the current user as a teacher which are meant for study sets",
        "operationId": "getTAsForTeacherStudySet",
        "responses": {
          "200": {
            "description": "TAs retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TAs not found"
          },
          "500": {
            "description": "Error getting TAs"
          }
        }
      }
    },
    "/tas/all/me/student": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get all TAs for the current user as a student",
        "description": "Get all TAs for the current user as a student",
        "operationId": "getTAsForStudent",
        "responses": {
          "200": {
            "description": "TAs retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TAs not found"
          },
          "500": {
            "description": "Error getting TAs"
          }
        }
      }
    },
    "/tas/all/me/student/study-set": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get all TAs for the current user as a student which are meant for study sets",
        "description": "Get all TAs for the current user as a student which are meant for study sets",
        "operationId": "getTAsForStudentStudySet",
        "responses": {
          "200": {
            "description": "TAs retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TA"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TAs not found"
          },
          "500": {
            "description": "Error getting TAs"
          }
        }
      }
    },
    "/tas/{taId}": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get a TA",
        "description": "Get a TA by its ID",
        "operationId": "getTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA not found"
          },
          "500": {
            "description": "Error getting TA"
          }
        }
      }
    },
    "/tas/published/classrooms/{taId}": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get all published classrooms for the TA",
        "description": "Get all published classrooms for the TA",
        "operationId": "getPublishedClassroomsForTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Published classrooms retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassroomTAs"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "Published classrooms not found"
          },
          "500": {
            "description": "Error getting published classrooms"
          }
        }
      }
    },
    "/tas/create": {
      "post": {
        "tags": [
          "TA"
        ],
        "summary": "Create a TA",
        "dsecription": "Create a TA",
        "operationId": "createTA",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "img": {
                    "type": "string",
                    "format": "uri",
                    "required": true,
                    "description": "The URL of the TA's profile picture"
                  },
                  "description": {
                    "type": "string",
                    "example": "Sarah is a TA for undergrad level Calculus",
                    "required": true
                  },
                  "resourceIds": {
                    "type": "array",
                    "required": false,
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TA created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error creating TA"
          }
        }
      }
    },
    "/tas/assistant/create/{taId}": {
      "post": {
        "tags": [
          "TA"
        ],
        "summary": "Create an OpenAI assistant object for the TA",
        "description": "Create an OpenAI assistant object for the TA",
        "operationId": "createAssistantForTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Assistant created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "TA assistant created successfully"
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA not found"
          },
          "500": {
            "description": "Error creating assistant"
          }
        }
      }
    },
    "/tas/assistant/suggested/{taId}": {
      "get": {
        "tags": [
          "TA"
        ],
        "summary": "Get suggested prompts to use for the TA",
        "description": "Get suggested prompts to use for the TA",
        "operationId": "getSuggestedPromptsForTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suggested prompts retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "What is the derivative of x^2?"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA not found"
          },
          "500": {
            "description": "Error getting suggested prompts"
          }
        }
      }
    },
    "/tas/update/{taId}": {
      "put": {
        "tags": [
          "TA"
        ],
        "summary": "Update a TA",
        "description": "Update a TA by its ID",
        "operationId": "updateTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "schema": {
              "$ref": "#/components/schemas/TA"
            }
          }
        },
        "responses": {
          "200": {
            "description": "TA updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error updating TA"
          }
        }
      }
    },
    "/tas/resources/{taId}": {
      "put": {
        "tags": [
          "TA"
        ],
        "summary": "Update a TA's resources",
        "description": "Update a TA's resources by its ID",
        "operationId": "updateTAResources",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resourceIds": {
                    "type": "array",
                    "required": true,
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TA resources updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error updating TA resources"
          }
        }
      }
    },
    "/tas/delete/{taId}": {
      "delete": {
        "tags": [
          "TA"
        ],
        "summary": "Delete a TA",
        "description": "Delete a TA by its ID",
        "operationId": "deleteTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "required": true,
            "description": "ID of the TA object",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "TA deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error deleting TA"
          }
        }
      }
    },
    "/sessions/user": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all TA sessions for current user",
        "description": "Get all TA sessions for the current user",
        "operationId": "getTASessionsForUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TASession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No TA sessions found for user"
          },
          "500": {
            "description": "Error getting TA sessions for user"
          }
        }
      }
    },
    "/sessions/user/classroom/{classroomId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all TA sessions for current user in classroom",
        "description": "Get all TA sessions for the current user in classroom",
        "operationId": "getTASessionsForUserInClassroom",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "ID of classroom to return sessions for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TASession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not in classroom or is inactive"
          },
          "404": {
            "description": "No TA sessions found for user in classroom"
          },
          "500": {
            "description": "Error getting TA sessions for user in classroom"
          }
        }
      }
    },
    "/sessions/{taSessionId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get TA session by ID",
        "description": "Get TA session by ID",
        "operationId": "getTASessionById",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA session successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TASession"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "TA session not found"
          },
          "500": {
            "description": "Error getting TA session by ID"
          }
        }
      }
    },
    "/sessions/ta/{taId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all TA sessions for TA",
        "description": "Get all TA sessions for TA",
        "operationId": "getTASessionsForTA",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "description": "ID of TA to return sessions for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA sessions successfully retrieved for TA",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TASession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No TA sessions found for TA"
          },
          "500": {
            "description": "Error getting TA sessions for TA"
          }
        }
      }
    },
    "/sessions/ta/{taId}/user/{userId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all TA sessions for TA and user",
        "description": "Get all TA sessions for TA and user",
        "operationId": "getTASessionsForTAAndUser",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "description": "ID of TA to return sessions for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return sessions for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA sessions successfully retrieved for TA and user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TASession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No TA sessions found for TA and user"
          },
          "500": {
            "description": "Error getting TA sessions for TA and user"
          }
        }
      }
    },
    "/sessions/ta/{taId}/my": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all TA sessions for TA and current user",
        "description": "Get all TA sessions for TA and the current user",
        "operationId": "getTASessionsForTAAndCurrentUser",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "description": "ID of TA to return sessions for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA sessions successfully retrieved for TA and current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TASession"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No TA sessions found for TA and current user"
          },
          "500": {
            "description": "Error getting TA sessions for TA and current user"
          }
        }
      }
    },
    "/sessions/session/{sessionsId}/messages": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get all messages for TA session",
        "description": "Get all messages for TA session",
        "operationId": "getMessagesForTASession",
        "parameters": [
          {
            "name": "sessionsId",
            "in": "path",
            "description": "ID of TA session to return messages for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages successfully retrieved for TA session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Either 'Student:' or 'Tutor:' for the message sender"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No messages found for TA session"
          },
          "500": {
            "description": "Error getting messages for TA session"
          }
        }
      }
    },
    "/sessions/create/{taId}": {
      "post": {
        "tags": [
          "TA Session"
        ],
        "summary": "Create a new TA session",
        "description": "Create a new TA session",
        "operationId": "createTASession",
        "parameters": [
          {
            "name": "taId",
            "in": "path",
            "description": "ID of TA to create session for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TA session successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TASession"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error creating TA session"
          }
        }
      }
    },
    "/sessions/session/send/{taSessionId}/text": {
      "post": {
        "tags": [
          "TA Session"
        ],
        "summary": "Send a text message in a TA session",
        "description": "Send a text message in a TA session and receive a streamed response",
        "operationId": "sendTextMessage",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to send message in",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "required": true,
                    "description": "The message to send"
                  },
                  "fileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The IDs of the files to send (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message successfully sent and response streaming",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Chunks of the assistant's response"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA session not found"
          },
          "500": {
            "description": "Error sending message"
          }
        }
      }
    },
    "/sessions/session/send/{taSessionId}/audio": {
      "post": {
        "tags": [
          "TA Session"
        ],
        "summary": "Send an audio message in a TA session",
        "description": "Send an audio message in a TA session, get it transcribed, and receive a streamed response",
        "operationId": "sendAudioMessage",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to send message in",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "audio": {
                    "type": "string",
                    "format": "binary",
                    "description": "The audio file to send"
                  },
                  "fileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The IDs of additional files to send (optional)"
                  },
                  "attachmentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the attachment (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio message successfully processed and response streaming",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Chunks of the assistant's response"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or no file uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA session not found"
          },
          "500": {
            "description": "Error sending message"
          }
        }
      }
    },
    "/sessions/session/assistant/suggested/{taSessionId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get suggested replies for the assistant based on the last messages",
        "description": "Get suggested replies for the assistant based on the last messages",
        "operationId": "getSuggestedReplies",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to get suggested replies for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suggested replies successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Suggested reply",
                    "example": "Explain solar flare cause and effects"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "TA session not found"
          },
          "500": {
            "description": "Error getting suggested replies"
          }
        }
      }
    },
    "/sessions/session/exit/{taSessionId}": {
      "post": {
        "tags": [
          "TA Session"
        ],
        "summary": "Exit a TA session",
        "description": "Exit a TA session",
        "operationId": "exitTASession",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to exit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TA session successfully exited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TASessionInsight"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "TA session not found | No messages found in session to generate insight from"
          },
          "500": {
            "description": "Error exiting TA session"
          }
        }
      }
    },
    "/sessions/session/insight/{taSessionId}": {
      "get": {
        "tags": [
          "TA Session"
        ],
        "summary": "Get insight for TA session",
        "description": "Get insight for TA session",
        "operationId": "getTASessionInsight",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to get insight for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight successfully retrieved for TA session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TASessionInsight"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "TA session not found | No messages found in session to generate insight from"
          },
          "500": {
            "description": "Error getting insight for TA session"
          }
        }
      }
    },
    "/sessions/update/{taSessionId}": {
      "put": {
        "tags": [
          "TA Session"
        ],
        "summary": "Update TA session",
        "description": "Update TA session",
        "operationId": "updateTASession",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA session successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TASession"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error updating TA session"
          }
        }
      }
    },
    "/sessions/delete/{taSessionId}": {
      "delete": {
        "tags": [
          "TA Session"
        ],
        "summary": "Delete TA session",
        "description": "Delete TA session",
        "operationId": "deleteTASession",
        "parameters": [
          {
            "name": "taSessionId",
            "in": "path",
            "description": "ID of TA session to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA session successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error deleting TA session"
          }
        }
      }
    },
    "/tashares/add/{taShareId}/student/{studentId}": {
      "put": {
        "tags": [
          "TA Share"
        ],
        "summary": "Add a student to a TA share",
        "description": "Add a student to a TA share",
        "operationId": "addStudentToTAShare",
        "parameters": [
          {
            "name": "taShareId",
            "in": "path",
            "description": "The ID of the TA share",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "description": "The ID of the student",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student added to TA share",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Student added to TA share"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error adding student to TA share"
          }
        }
      }
    },
    "/tashares/create": {
      "post": {
        "tags": [
          "TA Share"
        ],
        "summary": "Create a TA share",
        "description": "Create a TA share",
        "operationId": "createTAShare",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentsId": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "taId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "permissions": {
                    "type": "string",
                    "enum": [
                      "READ",
                      "WRITE"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TA share created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TAShare"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | TA share already exists"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error creating TA share"
          }
        }
      }
    },
    "/tashares/update/{taShareId}": {
      "put": {
        "tags": [
          "TA Share"
        ],
        "summary": "Update a TA share",
        "description": "Update a TA share",
        "operationId": "updateTAShare",
        "parameters": [
          {
            "name": "taShareId",
            "in": "path",
            "description": "The ID of the TA share",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TAShare"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TA share updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TAShare"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error updating TA share"
          }
        }
      }
    },
    "/tashares/delete/{taShareId}": {
      "delete": {
        "tags": [
          "TA Share"
        ],
        "summary": "Delete a TA share",
        "description": "Delete a TA share",
        "operationId": "deleteTAShare",
        "parameters": [
          {
            "name": "taShareId",
            "in": "path",
            "description": "The ID of the TA share",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TA share deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error deleting TA share"
          }
        }
      }
    },
    "/tashares/remove/{taShareId}/student/{studentId}": {
      "delete": {
        "tags": [
          "TA Share"
        ],
        "summary": "Remove a student from a TA share",
        "description": "Remove a student from a TA share",
        "operationId": "removeStudentFromTAShare",
        "parameters": [
          {
            "name": "taShareId",
            "in": "path",
            "description": "The ID of the TA share",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "description": "The ID of the student",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student removed from TA share",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Student removed from TA share"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error removing student from TA share"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user",
        "description": "Get the current user",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Current user retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error getting user"
          }
        }
      }
    },
    "/users/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user by ID",
        "description": "Get a user by ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Invalid ID supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error getting user"
          }
        }
      }
    },
    "/users/me/update": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update the current user",
        "description": "Update the current user",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Cannot update user type after onboarding"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error updating user"
          }
        }
      }
    },
    "/users/me/pfp": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update the current user's profile picture",
        "description": "Update the current user's profile picture",
        "operationId": "updateUserPfp",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Invalid file type"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error updating user profile picture"
          }
        }
      }
    },
    "/users/me/hard": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Hard delete the current user",
        "description": "Hard delete the current user",
        "operationId": "hardDeleteUser",
        "responses": {
          "200": {
            "description": "User hard deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "500": {
            "description": "Error hard deleting user"
          }
        }
      }
    },
    "/users/me/guess/teacher-type": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Guess the current user's teacher type",
        "description": "Guess the current user's teacher type",
        "operationId": "guessTeacherType",
        "responses": {
          "200": {
            "description": "Teacher type guessed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prediction": {
                      "type": "string",
                      "description": "The predicted teacher type",
                      "example": "coding/programming teacher"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error guessing teacher type"
          }
        }
      }
    },
    "/users/me/materials": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user's materials",
        "description": "Get the current user's materials",
        "operationId": "getUserMaterials",
        "responses": {
          "200": {
            "description": "User materials retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Note"
                      }
                    },
                    "studySets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StudySet"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error getting user materials"
          }
        }
      }
    },
    "/users/me/referral-code": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user's referral code",
        "description": "Get the referral code of the currently logged-in user",
        "operationId": "getReferralCode",
        "responses": {
          "200": {
            "description": "Referral code retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referralCode": {
                      "type": "string",
                      "description": "The user's referral code",
                      "example": "ABCD123456"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error getting referral code"
          }
        }
      }
    },
    "/users/me/apply-referral": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Apply a referral code",
        "description": "Apply a referral code to the current user's account",
        "operationId": "applyReferralCode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "referralCode": {
                    "type": "string",
                    "description": "The referral code to apply",
                    "example": "WXYZ987654"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Referral code applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Referral code applied successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Invalid referral code | User has already been referred or is on Plus plan"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error applying referral code"
          }
        }
      }
    },
    "/users/me/download-data": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Request download of user data",
        "description": "Initiates a process to gather and email the user's data",
        "operationId": "downloadUserData",
        "responses": {
          "202": {
            "description": "Data export request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message",
                      "example": "Your data export request has been received. You will receive an email with your data shortly."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error initiating data download"
          }
        }
      }
    },
    "/users/me/mailing-list": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update mailing list subscription",
        "description": "Update the current user's mailing list subscription status",
        "operationId": "updateMailingListSubscription",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isSubscribed": {
                    "type": "boolean",
                    "description": "Whether the user wants to subscribe to the mailing list",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mailing list subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error updating mailing list subscription"
          }
        }
      }
    },
    "/users/me/sample-data/student": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set up sample data for a student user",
        "description": "Create sample data including a TA, note, and study set for a newly onboarded student user",
        "operationId": "setupStudentSampleData",
        "responses": {
          "200": {
            "description": "Sample data created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sample data created successfully"
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    },
                    "note": {
                      "$ref": "#/components/schemas/Note"
                    },
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a student | User is not onboarded"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error setting up sample data"
          }
        }
      }
    },
    "/users/me/sample-data/teacher/{classroomId}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set up sample data for a teacher user",
        "description": "Create sample data including a TA, note, study set, and class material for a newly onboarded teacher user in a specific classroom",
        "operationId": "setupTeacherSampleData",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "ID of the classroom to create sample data for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sample data created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sample data created successfully"
                    },
                    "ta": {
                      "$ref": "#/components/schemas/TA"
                    },
                    "note": {
                      "$ref": "#/components/schemas/Note"
                    },
                    "studySet": {
                      "$ref": "#/components/schemas/StudySet"
                    },
                    "material": {
                      "$ref": "#/components/schemas/Material"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request | Invalid classroomId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is inactive | User is not a teacher | User is not onboarded"
          },
          "404": {
            "description": "User not found | Classroom not found or unauthorized"
          },
          "500": {
            "description": "Error setting up sample data"
          }
        }
      }
    },
    "/utils/chat/completion": {
      "post": {
        "tags": [
          "Util"
        ],
        "summary": "Stream chat completion for text modification (HTTP)",
        "description": "Modify highlighted text within a given context using various modification types and stream the response via HTTP",
        "operationId": "streamChatCompletionHttp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "context",
                  "type",
                  "highlighted"
                ],
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "The full context in which the highlighted text appears"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "summarize",
                      "makelonger",
                      "makeshorter",
                      "simplify",
                      "examples",
                      "flashcards",
                      "custom"
                    ],
                    "description": "The type of modification to apply to the highlighted text"
                  },
                  "highlighted": {
                    "type": "string",
                    "description": "The specific text to be modified within the context"
                  },
                  "prompt": {
                    "type": "string",
                    "description": "Custom prompt for modification (required when type is 'custom')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with streaming content",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Chunks of the modified text or '[DONE]' to signify the end of the stream"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Error processing chat completion"
          }
        }
      }
    },
    "/ws": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "WebSocket connection for chat completion streaming",
        "description": "Establish a WebSocket connection for real-time streaming of chat completion results",
        "operationId": "streamChatCompletionWebSocket",
        "responses": {
          "101": {
            "description": "Switching Protocols - WebSocket connection established"
          }
        },
        "x-websocket": true,
        "x-websocket-description": "Once the WebSocket connection is established, clients can send chat completion requests and receive streamed responses.\n\nMessage format for sending requests:\n```json\n{\n  \"context\": \"string\",\n  \"type\": \"summarize|makelonger|makeshorter|simplify|examples|flashcards|custom\",\n  \"highlighted\": \"string\",\n  \"prompt\": \"string (required for custom type)\"\n}\n```\n\nResponse format:\n```json\n{\n  \"content\": \"string (chunk of modified text or '[DONE]' to signify the end of the stream)\"\n}\n```\n\nError response format:\n```json\n{\n  \"error\": \"string (error message)\"\n}\n```\n"
      }
    },
    "/utils/jwt": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "Generate a JWT token for authentication",
        "description": "Generate a JWT token for authentication",
        "operationId": "generateJWT",
        "responses": {
          "200": {
            "description": "Successful response with JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The generated JWT token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error generating JWT token"
          }
        }
      }
    },
    "/utils/tiptap-jwt": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "Generate a JWT token for authentication",
        "description": "Generate a JWT token for authentication",
        "operationId": "generateJWT",
        "responses": {
          "200": {
            "description": "Successful response with JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The generated JWT token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error generating JWT token"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivityResult object."
          },
          "activitySessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the activity session this result belongs to."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user who participated in the activity."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set associated with this activity."
          },
          "activityType": {
            "type": "string",
            "enum": [
              "MATCHING",
              "ASTEROID"
            ],
            "description": "The type of activity that was performed."
          },
          "score": {
            "type": "integer",
            "description": "The score achieved in the activity."
          },
          "timeTaken": {
            "type": "number",
            "format": "double",
            "description": "The total time taken to complete the activity in seconds."
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity was completed."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity result was last updated."
          }
        }
      },
      "ActivityRoundResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivityRoundResult object."
          },
          "activitySessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the activity session this round result belongs to."
          },
          "roundNumber": {
            "type": "integer",
            "description": "The round number of the activity."
          },
          "score": {
            "type": "integer",
            "description": "The score achieved in this round of the activity."
          },
          "timeSpent": {
            "type": "number",
            "format": "double",
            "description": "The time spent on this round of the activity in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the round result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the round result was last updated."
          }
        }
      },
      "ActivitySession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the ActivitySession object."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user participating in the activity."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set associated with this activity."
          },
          "activityType": {
            "type": "string",
            "enum": [
              "MATCHING",
              "ASTEROID"
            ],
            "description": "The type of activity being performed."
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session started."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session ended (if completed)."
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "TIMED_OUT"
            ],
            "description": "The current status of the activity session."
          },
          "currentRound": {
            "type": "integer",
            "description": "The current round number of the activity."
          },
          "timeRemaining": {
            "type": "number",
            "format": "double",
            "description": "The remaining time for the activity session in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the activity session was last updated."
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "description": "The unique identifier of the chat message."
          },
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TASession",
            "required": true,
            "description": "The unique identifier of the TA session."
          },
          "userSenderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "The unique identifier of the user who sent the message."
          },
          "userReceiverId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "The unique identifier of the user who received the message."
          },
          "taSenderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "description": "The unique identifier of the TA who sent the message."
          },
          "taReceiverId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "description": "The unique identifier of the TA who received the message."
          },
          "attachmentId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/MessageAttachment",
            "description": "The unique identifier of the message/file attachment."
          },
          "messageText": {
            "type": "string",
            "maxLength": 10000,
            "description": "The text content of the chat message.",
            "example": "Hi can I get some help with my math assignment?"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the chat message was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the chat message was last updated."
          }
        }
      },
      "Classroom": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the classroom."
          },
          "className": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name of the classroom.",
            "example": "AP Biology 2nd Period"
          },
          "img": {
            "type": "string",
            "maxLength": 1000,
            "description": "The URL or descriptor of the image for the classroom.",
            "example": "https://www.example.com/image.jpg"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The owner of the classroom."
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The description of the classroom.",
            "example": "This is a classroom for AP Biology students."
          },
          "section": {
            "type": "string",
            "maxLength": 50,
            "description": "The section/period/placement of the classroom either in a time or physical sense.",
            "example": "Period 2"
          },
          "gradeLevel": {
            "type": "string",
            "maxLength": 50,
            "description": "The grade level of the classroom.",
            "example": "5th Grade"
          },
          "classroomCode": {
            "type": "string",
            "maxLength": 16,
            "required": true,
            "unique": true,
            "description": "The unique identifier used to join the classroom.",
            "example": "KHF76D"
          },
          "status": {
            "type": "string",
            "required": true,
            "enum": [
              "CONNECTED",
              "DISCONNECTED",
              "ARCHIVED"
            ],
            "default": "DISCONNECTED",
            "description": "The status of the classroom.",
            "example": "CONNECTED"
          },
          "googleClassroomId": {
            "type": "string",
            "maxLength": 50,
            "description": "The unique identifier of the Google Classroom in Google API.",
            "unique": true
          },
          "lastCodeGen": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "required": true,
            "description": "The date and time the last code was generated."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the classroom was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the classroom was last updated/modified at."
          }
        }
      },
      "ClassroomUsers": {
        "type": "object",
        "properties": {
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The classroom to form the relationship with."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The user to form the relationship with."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "ClassroomTAs": {
        "type": "object",
        "properties": {
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The classroom to form the relationship with."
          },
          "taId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "required": true,
            "description": "The TA to form the relationship with."
          },
          "published": {
            "type": "boolean",
            "required": true,
            "description": "The status of the TA in the classroom."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "ClassroomTopicOverview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this classroom topic overview object."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "description": "The class this topic overview belongs to."
          },
          "strugglingTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "doingWellTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "commonQuestions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "required": true,
                  "description": "The title of the question."
                },
                "description": {
                  "type": "string",
                  "required": true,
                  "description": "The description of the question."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "Flashcard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the Flashcard object."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set this flashcard belongs to."
          },
          "term": {
            "type": "string",
            "description": "The term or question side of the flashcard."
          },
          "definition": {
            "type": "string",
            "description": "The definition or answer side of the flashcard."
          },
          "order": {
            "type": "integer",
            "description": "The order of the flashcard within the study set."
          },
          "isStarred": {
            "type": "boolean",
            "description": "Indicates whether the flashcard is starred by the user."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the flashcard was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the flashcard was last updated."
          }
        }
      },
      "GradedAssignment": {
        "type": "object",
        "description": "Represents a graded assignment submitted by a student",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the graded assignment",
            "readOnly": true
          },
          "graderId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Grader",
            "description": "ID of the grader associated with this assignment"
          },
          "studentId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "ID of the student who submitted this assignment"
          },
          "grade": {
            "type": "integer",
            "description": "The grade assigned to this submission"
          },
          "chainOfReasoning": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the person in the chain of reasoning"
                },
                "points": {
                  "type": "integer",
                  "description": "Points assigned by the person in the chain of reasoning"
                },
                "comments": {
                  "type": "string",
                  "description": "Comments provided by the person in the chain of reasoning"
                }
              }
            }
          },
          "reasons": {
            "type": "string",
            "maxLength": 1000,
            "description": "Reasons for the assigned grade",
            "nullable": true
          },
          "strengths": {
            "type": "string",
            "maxLength": 1000,
            "description": "Noted strengths of the submission",
            "nullable": true
          },
          "weaknesses": {
            "type": "string",
            "maxLength": 1000,
            "description": "Noted weaknesses or areas for improvement",
            "nullable": true
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of file IDs associated with this submission",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the graded assignment was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the graded assignment was last updated",
            "readOnly": true
          }
        },
        "required": [
          "graderId",
          "studentId",
          "grade"
        ],
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174002",
          "graderId": "123e4567-e89b-12d3-a456-426614174000",
          "studentId": "123e4567-e89b-12d3-a456-426614174003",
          "grade": 85,
          "reasons": "Well-structured essay with good arguments, but lacking some depth in analysis",
          "strengths": "Clear writing style, good use of examples",
          "weaknesses": "Could improve on critical analysis and connecting ideas",
          "fileIds": [
            "123e4567-e89b-12d3-a456-426614174004",
            "123e4567-e89b-12d3-a456-426614174005"
          ],
          "createdAt": "2023-06-30T09:00:00Z",
          "updatedAt": "2023-06-30T10:15:00Z"
        }
      },
      "Grader": {
        "type": "object",
        "description": "Represents a grader entity for assignments",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the grader",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title of the grader"
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "description": "ID of the classroom associated with this grader"
          },
          "totalPoints": {
            "type": "integer",
            "description": "Total points possible for this grader"
          },
          "assistantId": {
            "type": "string",
            "maxLength": 50,
            "description": "ID of the AI assistant associated with this grader"
          },
          "googleClassroomAssignment": {
            "type": "string",
            "maxLength": 50,
            "description": "ID of the associated Google Classroom assignment (if applicable)",
            "nullable": true
          },
          "gradingNotes": {
            "type": "string",
            "maxLength": 1000,
            "description": "Additional notes for grading",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the grader was created",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the grader was last updated",
            "readOnly": true
          }
        },
        "required": [
          "title",
          "totalPoints",
          "assistantId"
        ],
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "title": "Midterm Exam",
          "classroomId": "123e4567-e89b-12d3-a456-426614174001",
          "totalPoints": 100,
          "assistantId": "assistant-123",
          "googleClassroomAssignment": "gc-assignment-456",
          "gradingNotes": "Remember to check for proper citation format",
          "createdAt": "2023-06-29T12:34:56Z",
          "updatedAt": "2023-06-29T14:45:00Z"
        }
      },
      "Material": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the Material object."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The unique identifier for the Classroom this material is created for."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The unique identifier for the User this material was created by."
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "required": true,
            "description": "The name of the class material."
          },
          "materialType": {
            "type": "string",
            "maxLength": 25,
            "required": true,
            "description": "The type of material generated (e.g. Lesson Plan, Class Activity, Assessment)."
          },
          "duration": {
            "type": "string",
            "maxLength": 25,
            "required": true,
            "description": "The amount of time it should take to complete this material from the student side."
          },
          "description": {
            "type": "string",
            "maxLength": 2000,
            "required": true,
            "description": "The short description of what the material is and what it does."
          },
          "summary": {
            "type": "string",
            "maxLength": 5000,
            "required": true,
            "description": "A summary of what the material is ideally about."
          },
          "overview": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class material as a highly detailed overview of what it is and how it's structured. Used for Lesson Plans."
          },
          "guidedNotes": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class material as a highly detailed version that the student can follow by taking notes. This will also contain the answers to all fields. Used for Lesson Plans."
          },
          "activityPlan": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the class activity plan, detailing the structure and flow of the activity. Used for Class Activities."
          },
          "worksheet": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the worksheet associated with the class activity. Used for Class Activities."
          },
          "assessment": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the assessment content, including questions and instructions. Used for Assessments."
          },
          "rubric": {
            "type": "string",
            "maxLength": 20000,
            "description": "The markdown version of the rubric used for grading the assessment. Used for Assessments."
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialResource"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "LessonPlanOverview": {
        "type": "object",
        "properties": {
          "overview": {
            "type": "string",
            "description": "AI-generated markdown overview of the lesson plan. This field contains a structured overview including: 1. Title and Basic Information 2. Summary and Learning Objectives 3. Standards Alignment 4. Detailed Agenda 5. Assessment and Differentiation 6. Materials and Resources\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML or LaTeX for clarity.\n"
          }
        }
      },
      "GuidedNotes": {
        "type": "object",
        "properties": {
          "guidedNotes": {
            "type": "string",
            "description": "AI-generated markdown guided notes for the lesson plan. This field contains structured content with: - Clear, concise explanations of concepts - Relevant examples or illustrations - Questions or prompts that encourage critical thinking - Custom tags for different types of student responses:\n  * <question_#_tiny> for single word or very short answers\n  * <question_#_short> for answers of a few words\n  * <question_#_normal> for one to two sentence answers\n  * <question_#_long> for paragraph answers\n\nThe content uses markdown formatting, including headers and emphasis. It may also include light HTML or LaTeX for clarity.\n"
          }
        }
      },
      "ClassActivityPlan": {
        "type": "object",
        "properties": {
          "activityPlan": {
            "type": "string",
            "description": "AI-generated markdown plan for the class activity. This field contains a structured plan including: 1. Activity objectives and learning goals 2. Materials needed 3. Step-by-step instructions for conducting the activity 4. Time allocations for each part of the activity 5. Differentiation strategies 6. Assessment methods\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML for additional formatting if needed.\n"
          }
        }
      },
      "Worksheet": {
        "type": "object",
        "properties": {
          "worksheet": {
            "type": "string",
            "description": "AI-generated markdown worksheet for the class activity. This field contains structured content with: - Clear instructions for each section or question type - A variety of question types and tasks, such as:\n  * Multiple choice questions\n  * Short answer questions\n  * Fill-in-the-blank exercises\n  * Matching exercises\n  * Diagram labeling\n  * Problem-solving tasks\n  * Critical thinking questions\n- A progression from simpler to more complex tasks - Spaces for student responses using custom tags:\n  * <question_#_mc> for multiple choice questions\n  * <question_#_sa> for short answer questions\n  * <question_#_fb> for fill-in-the-blank exercises\n  * <question_#_m> for matching exercises\n  * <question_#_dl> for diagram labeling\n  * <question_#_ps> for problem-solving tasks\n  * <question_#_ct> for critical thinking questions\n- A mix of individual and group work elements (if applicable) - A reflection or self-assessment section at the end\nThe content uses markdown formatting, including headers, lists, and emphasis. It may also include light HTML for additional formatting if needed.\n"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "questionTag": {
                  "type": "string",
                  "description": "The tag corresponding to the question (e.g., \"question_1_mc\")"
                },
                "correctAnswer": {
                  "type": "string",
                  "description": "The correct answer for the question"
                },
                "explanation": {
                  "type": "string",
                  "description": "A detailed explanation of the correct answer and how to arrive at it"
                }
              }
            }
          }
        }
      },
      "Assessment": {
        "type": "object",
        "properties": {
          "assessment": {
            "type": "string",
            "description": "AI-generated markdown assessment plan. This field contains a structured plan including: 1. Assessment Title and Basic Information 2. Learning Objectives 3. Assessment Format 4. Question Types and Distribution 5. Sample Questions 6. Scoring and Grading 7. Accommodations and Modifications 8. Administration Instructions 9. Post-Assessment Analysis\nThe content uses markdown formatting, including headers, lists, and emphasis.\n"
          }
        }
      },
      "Rubric": {
        "type": "object",
        "properties": {
          "rubric": {
            "type": "string",
            "description": "AI-generated markdown rubric for the assessment. This field contains structured content with: - 4-6 key criteria aligned with the assessment's learning objectives - For each criterion:\n  * Clear description\n  * 3-4 performance levels (e.g., Excellent, Good, Fair, Needs Improvement)\n  * Detailed descriptors for each performance level\n- Point values or percentages for each criterion and performance level - Coverage of both content knowledge and skills (if applicable) - Notes or instructions for using the rubric\nThe content uses markdown formatting, including headers, tables, and emphasis.\n"
          }
        }
      },
      "MaterialResource": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the resource."
          },
          "link": {
            "type": "string",
            "format": "uri",
            "description": "The link to the resource."
          },
          "type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "WRITTEN"
            ],
            "description": "The type of resource (e.g. video, article, etc.)."
          }
        }
      },
      "MaterialUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "Lesson Plan",
              "Class Activity",
              "Assessment"
            ]
          },
          "duration": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        }
      },
      "MessageAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this MessageAttachment object."
          },
          "fileIds": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier for a resource object."
            },
            "description": "The list of files attached to this message."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the note.",
            "unique": true
          },
          "title": {
            "type": "string",
            "required": true,
            "description": "The title of the note."
          },
          "sourceType": {
            "type": "string",
            "enum": [
              "VIDEO",
              "AUDIO",
              "DOCUMENT"
            ],
            "description": "The type of the source of the note."
          },
          "meta": {
            "type": "string",
            "description": "The metadata of the note."
          },
          "content": {
            "type": "string",
            "required": true,
            "description": "The content of the note in markdown."
          },
          "transcript": {
            "type": "string",
            "description": "The transcript of the note."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the note was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the note was last updated/modified at."
          }
        }
      },
      "NoteClassrooms": {
        "type": "object",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Note",
            "required": true,
            "description": "The note to form the relationship with."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "required": true,
            "description": "The classroom to form the relationship with."
          },
          "published": {
            "type": "boolean",
            "required": true,
            "description": "The status of the note in the classroom."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "QuizQuestionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the QuizQuestionResult object."
          },
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the quiz session this result belongs to."
          },
          "questionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the question this result is for."
          },
          "userAnswer": {
            "type": "string",
            "description": "The answer provided by the user."
          },
          "correctAnswer": {
            "type": "string",
            "description": "The correct answer to the question."
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Indicates whether the user's answer was correct."
          },
          "score": {
            "type": "number",
            "format": "double",
            "description": "The score awarded for this question."
          },
          "feedback": {
            "type": "string",
            "description": "Any feedback provided for the user's answer."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the question result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the question result was last updated."
          }
        }
      },
      "QuizQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the QuizQuestion object."
          },
          "quizId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the quiz this question belongs to."
          },
          "questionType": {
            "type": "string",
            "enum": [
              "TRUE_FALSE",
              "MULTIPLE_CHOICE",
              "WRITTEN",
              "KNOWLEDGE_APPLICATION"
            ],
            "description": "The type of the question."
          },
          "question": {
            "type": "string",
            "description": "The text of the question."
          },
          "correctAnswer": {
            "type": "string",
            "description": "The correct answer to the question."
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of possible answers for multiple-choice questions."
          },
          "order": {
            "type": "integer",
            "description": "The order of the question within the quiz."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the question was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the question was last updated."
          }
        }
      },
      "QuizResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the QuizResult object."
          },
          "quizSessionId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the quiz session this result belongs to."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user who took the quiz."
          },
          "quizId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the quiz that was taken."
          },
          "score": {
            "type": "integer",
            "description": "The score achieved in the quiz."
          },
          "timeTaken": {
            "type": "integer",
            "description": "The total time taken to complete the quiz in seconds."
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz was completed."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz result was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz result was last updated."
          }
        }
      },
      "QuizSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the QuizSession object."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user taking the quiz."
          },
          "quizId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the quiz being taken."
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz session started."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz session ended (if completed)."
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "TIMED_OUT"
            ],
            "description": "The current status of the quiz session."
          },
          "currentQuestionIndex": {
            "type": "integer",
            "description": "The index of the current question in the quiz."
          },
          "timeRemaining": {
            "type": "integer",
            "description": "The remaining time for the quiz session in seconds."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz session was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz session was last updated."
          }
        }
      },
      "Quiz": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the Quiz object."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set this quiz is based on."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the quiz."
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the quiz."
          },
          "questionCount": {
            "type": "integer",
            "description": "The number of questions in the quiz."
          },
          "answerType": {
            "type": "string",
            "enum": [
              "TERM",
              "DEFINITION",
              "MIXED"
            ],
            "description": "The type of answers expected in the quiz."
          },
          "questionTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRUE_FALSE",
                "MULTIPLE_CHOICE",
                "WRITTEN",
                "KNOWLEDGE_APPLICATION"
              ]
            },
            "description": "The types of questions included in the quiz."
          },
          "additionalNotes": {
            "type": "string",
            "description": "Any additional notes or instructions for the quiz."
          },
          "flashcardIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "An array of flashcard IDs included in this quiz."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the quiz was last updated."
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this Resource object."
          },
          "fileName": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name of the file uploaded."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "description": "The URL to the file if uploaded or attached sourcing from DB or other."
          },
          "fileId": {
            "type": "string",
            "maxLength": 50,
            "description": "The OpenAI file ID storing the contents of the file."
          },
          "type": {
            "type": "string",
            "enum": [
              "IMAGE",
              "AUDIO",
              "VIDEO",
              "DOCUMENT"
            ],
            "required": true,
            "description": "The type of file being used."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "StudentInsight": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this student insight object."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/Classroom",
            "description": "The class this student insight belongs to."
          },
          "studentId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "description": "The student this insight is relating to."
          },
          "report": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The basic summary of how the student has been doing for the past month given their TA session activity."
          },
          "teacherAction": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The action steps that the teacher can take to improve."
          },
          "studentAction": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The action steps that the student can take to improve."
          },
          "engagementScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The overall average score received for the student's engagement."
          },
          "masteryScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The overall average score received for the student's mastery of the content."
          },
          "learningScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The overall average score received for the student's capability to grow and learn from it."
          },
          "accuracyScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The overall average of mastery, engagement, and learning scores."
          },
          "accuracyMapping": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "required": true,
                  "description": "The date the score was recorded."
                },
                "accuracyScore": {
                  "type": "integer",
                  "required": true,
                  "description": "The accuracy score for the given date."
                }
              }
            }
          },
          "strugglingTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "required": true,
                  "description": "The topic that the student is struggling with."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "doingWellTopics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "required": true,
                  "description": "The topic that the student is doing well in."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "commonQuestions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "required": true,
                  "description": "The question that the student is struggling with."
                },
                "tag": {
                  "type": "string",
                  "enum": [
                    "Concept",
                    "Topic",
                    "Chapter",
                    "Question"
                  ],
                  "required": true
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "StudySetProgress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the StudySetProgress object."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user whose progress is being tracked."
          },
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set being tracked."
          },
          "flashcardId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the flashcard being tracked."
          },
          "status": {
            "type": "string",
            "enum": [
              "NEW",
              "LEARNING",
              "MASTERED"
            ],
            "description": "The current learning status of the flashcard for the user."
          },
          "lastStudied": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the flashcard was last studied by the user."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the progress tracking was initiated."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the progress was last updated."
          }
        }
      },
      "StudySet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the StudySet object."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user who created this study set."
          },
          "taId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the teaching assistant associated with this study set, if any."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the study set."
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the study set."
          },
          "spacing": {
            "type": "boolean",
            "description": "Whether the spacing method is used for the study set."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the study set was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the study set was last updated."
          }
        }
      },
      "StudySetClassroom": {
        "type": "object",
        "properties": {
          "studySetId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the study set."
          },
          "classroomId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the classroom."
          },
          "published": {
            "type": "boolean",
            "required": true,
            "description": "The status of the study set in the classroom."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the study set was associated with the classroom."
          }
        }
      },
      "TA": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "description": "The unique identifier of the TA."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/User",
            "required": true,
            "description": "The unique identifier of the user creating the TA assistant."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name of the TA assistant.",
            "example": "Sarah Moore"
          },
          "img": {
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "required": true,
            "description": "The URL of the TA assistant's profile picture.",
            "example": "https://example.com/profile.jpg"
          },
          "usage": {
            "type": "string",
            "enum": [
              "USER",
              "STUDY_SET",
              "CLASSROOM"
            ]
          },
          "voiceId": {
            "type": "string",
            "maxLength": 100,
            "description": "The Azure or ElevenLabs voice ID."
          },
          "assistantId": {
            "type": "string",
            "maxLength": 50,
            "description": "The OpenAI Assistant ID."
          },
          "instructions": {
            "type": "string",
            "maxLength": 2000,
            "required": true,
            "description": "The Assistant instructions as per system run.",
            "example": "You are an expert in mathematics and answer student math questions."
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The description of the TA.",
            "example": "Sarah, your expert in all things AP Calculus BC."
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "$ref": "#/components/schemas/Resource",
              "description": "The unique identifier of the resource file."
            },
            "description": "The list of resources available to the TA.",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000",
              "123e4567-e89b-12d3-a456-426614174001"
            ]
          },
          "class": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name of the class the TA is assisting with.",
            "example": "AP Calculus BC"
          },
          "gradeLevel": {
            "type": "string",
            "maxLength": 50,
            "required": true,
            "description": "The grade level the TA is assisting with.",
            "example": "12th Grade"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "description": "The date and time when the TA was created.",
            "default": "now()"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the TA was last updated.",
            "default": "now()"
          }
        }
      },
      "TASessionInsight": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/TASession",
            "required": true,
            "unique": true,
            "description": "The session this insight belongs to."
          },
          "topicsCovered": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "maxLength": 500,
              "description": "A topic that was covered in this session."
            },
            "description": "List of topics covered in this session."
          },
          "summary": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "The quick summary of what the session was about."
          },
          "action": {
            "type": "string",
            "maxLength": 1000,
            "required": true,
            "description": "Action steps to be taken by the student to improve."
          },
          "engagementScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The score this session received for the student's engagement."
          },
          "masteryScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The score this session received for the student's mastery of the content."
          },
          "learningScore": {
            "type": "integer",
            "required": true,
            "default": 0,
            "description": "The score this session received for the student's capability to grow and learn from it."
          },
          "figure": {
            "type": "string",
            "description": "A figure written in Mermaid.js syntax to represent the session visually.",
            "required": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "TASession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the TASession object."
          },
          "taId": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "$ref": "#/components/schemas/TA",
            "description": "The unique identifier for the TA used in this session."
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "$ref": "#/components/schemas/User",
            "description": "The unique identifier for the user using this session and TA."
          },
          "threadId": {
            "type": "string",
            "maxLength": 50,
            "required": true,
            "description": "The ID of the OpenAI thread object that stores the conversation."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The name shortly describing the session."
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the session was last used."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "TAShare": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for this TAShare object."
          },
          "studentsId": {
            "type": "array",
            "required": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "$ref": "#/components/schemas/User",
              "descripton": "The unique identifier for the User object."
            },
            "description": "The list of users this TA was shared to directly."
          },
          "taId": {
            "type": "string",
            "format": "uuid",
            "$ref": "#/components/schemas/TA",
            "required": true,
            "description": "The unique identifier of the TA that is being shared."
          },
          "permissions": {
            "type": "string",
            "enum": [
              "READ",
              "WRITE"
            ],
            "required": true,
            "default": "READ",
            "description": "The permission level the student will have once this TA is shared with them.",
            "example": "READ"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "required": true,
            "default": "now()",
            "description": "The date and time the object was created at."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "description": "The date and time the object was last updated/modified at."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "required": true,
            "description": "The unique identifier of the user."
          },
          "username": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The username of the user.",
            "example": "johndoe",
            "unique": true
          },
          "password": {
            "type": "string",
            "maxLength": 500,
            "required": true,
            "description": "The user's password. (hashed)",
            "example": "SecretPassword#123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "required": true,
            "unique": true,
            "description": "The email address of the user.",
            "example": "test@example.com"
          },
          "firstName": {
            "type": "string",
            "maxLength": 255,
            "required": true,
            "description": "The first name of the user.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 255,
            "description": "The last name of the user.",
            "example": "Doe"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FLAGGED",
              "DELETED"
            ],
            "required": true,
            "default": "ACTIVE",
            "description": "The status of the user.",
            "example": "ACTIVE"
          },
          "img": {
            "type": "string",
            "format": "uri",
            "maxLength": 500,
            "description": "The URL of the user's profile picture.",
            "example": "https://example.com/profile.jpg"
          },
          "type": {
            "type": "string",
            "enum": [
              "STUDENT",
              "TEACHER",
              "ADMIN"
            ],
            "description": "The type of user.",
            "example": "STUDENT"
          },
          "grantedScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The scopes granted to the user.",
            "example": [
              "https://www.googleapis.com/auth/classroom.addons.teacher",
              "https://www.googleapis.com/auth/userinfo.email",
              "https://www.googleapis.com/auth/userinfo.profile",
              "openid"
            ]
          },
          "googleId": {
            "type": "string",
            "maxLength": 50,
            "unique": true,
            "description": "The Google ID of the user."
          },
          "googleAccessToken": {
            "type": "string",
            "maxLength": 500,
            "description": "The Google Access Token of the user."
          },
          "googleRefreshToken": {
            "type": "string",
            "maxLength": 500,
            "description": "The Google Refresh Token of the user."
          },
          "googleTokenExpiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "The expiry time of the Google Access Token."
          },
          "isConnectedToClassroom": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the user is connected to a Google Classroom."
          },
          "lastLoggedIn": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the user last logged in.",
            "default": "now()",
            "example": "2021-01-01T00:00:00Z"
          },
          "reference": {
            "type": "string",
            "maxLength": 255,
            "description": "How they heard about the platform.",
            "example": "Google | Friend | Facebook | etc."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "required": true,
            "description": "The date and time when the user was created.",
            "example": "2021-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "default": "now()",
            "required": true,
            "description": "The date and time when the user was last updated.",
            "example": "2021-01-01T00:00:00Z"
          },
          "referralCode": {
            "type": "string",
            "maxLength": 10,
            "unique": true,
            "description": "The unique referral code for the user.",
            "example": "ABCD123456"
          },
          "referredBy": {
            "type": "string",
            "maxLength": 10,
            "description": "The referral code of the user who referred this user.",
            "example": "WXYZ987654"
          },
          "isSubscribedToMailingList": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the user is subscribed to the mailing list."
          },
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "PLUS"
            ],
            "default": "FREE",
            "description": "The current plan of the user.",
            "example": "FREE"
          },
          "plusTrialStart": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the Plus trial period.",
            "example": "2023-05-01T00:00:00Z"
          },
          "plusTrialEnd": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the Plus trial period.",
            "example": "2023-05-31T23:59:59Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "The request was invalid or cannot be served",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MethodNotAllowedError": {
        "description": "The requested method is not allowed for the specified resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "The server encountered an unexpected condition that prevented it from fulfilling the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}